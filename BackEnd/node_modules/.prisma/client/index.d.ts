
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Query
 * 
 */
export type Query = $Result.DefaultSelection<Prisma.$QueryPayload>
/**
 * Model ChatbotSession
 * 
 */
export type ChatbotSession = $Result.DefaultSelection<Prisma.$ChatbotSessionPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Faq
 * 
 */
export type Faq = $Result.DefaultSelection<Prisma.$FaqPayload>
/**
 * Model QuestionKeyword
 * 
 */
export type QuestionKeyword = $Result.DefaultSelection<Prisma.$QuestionKeywordPayload>
/**
 * Model Greeting
 * 
 */
export type Greeting = $Result.DefaultSelection<Prisma.$GreetingPayload>
/**
 * Model SchoolDetail
 * 
 */
export type SchoolDetail = $Result.DefaultSelection<Prisma.$SchoolDetailPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model SchoolFaq
 * 
 */
export type SchoolFaq = $Result.DefaultSelection<Prisma.$SchoolFaqPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.query`: Exposes CRUD operations for the **Query** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Queries
    * const queries = await prisma.query.findMany()
    * ```
    */
  get query(): Prisma.QueryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.chatbotSession`: Exposes CRUD operations for the **ChatbotSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatbotSessions
    * const chatbotSessions = await prisma.chatbotSession.findMany()
    * ```
    */
  get chatbotSession(): Prisma.ChatbotSessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.faq`: Exposes CRUD operations for the **Faq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Faqs
    * const faqs = await prisma.faq.findMany()
    * ```
    */
  get faq(): Prisma.FaqDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.questionKeyword`: Exposes CRUD operations for the **QuestionKeyword** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuestionKeywords
    * const questionKeywords = await prisma.questionKeyword.findMany()
    * ```
    */
  get questionKeyword(): Prisma.QuestionKeywordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.greeting`: Exposes CRUD operations for the **Greeting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Greetings
    * const greetings = await prisma.greeting.findMany()
    * ```
    */
  get greeting(): Prisma.GreetingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schoolDetail`: Exposes CRUD operations for the **SchoolDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolDetails
    * const schoolDetails = await prisma.schoolDetail.findMany()
    * ```
    */
  get schoolDetail(): Prisma.SchoolDetailDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schoolFaq`: Exposes CRUD operations for the **SchoolFaq** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SchoolFaqs
    * const schoolFaqs = await prisma.schoolFaq.findMany()
    * ```
    */
  get schoolFaq(): Prisma.SchoolFaqDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Query: 'Query',
    ChatbotSession: 'ChatbotSession',
    Feedback: 'Feedback',
    Teacher: 'Teacher',
    Department: 'Department',
    Course: 'Course',
    Faq: 'Faq',
    QuestionKeyword: 'QuestionKeyword',
    Greeting: 'Greeting',
    SchoolDetail: 'SchoolDetail',
    Contact: 'Contact',
    SchoolFaq: 'SchoolFaq'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "query" | "chatbotSession" | "feedback" | "teacher" | "department" | "course" | "faq" | "questionKeyword" | "greeting" | "schoolDetail" | "contact" | "schoolFaq"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Query: {
        payload: Prisma.$QueryPayload<ExtArgs>
        fields: Prisma.QueryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QueryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QueryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          findFirst: {
            args: Prisma.QueryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QueryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          findMany: {
            args: Prisma.QueryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>[]
          }
          create: {
            args: Prisma.QueryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          createMany: {
            args: Prisma.QueryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QueryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>[]
          }
          delete: {
            args: Prisma.QueryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          update: {
            args: Prisma.QueryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          deleteMany: {
            args: Prisma.QueryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QueryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QueryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>[]
          }
          upsert: {
            args: Prisma.QueryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QueryPayload>
          }
          aggregate: {
            args: Prisma.QueryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuery>
          }
          groupBy: {
            args: Prisma.QueryGroupByArgs<ExtArgs>
            result: $Utils.Optional<QueryGroupByOutputType>[]
          }
          count: {
            args: Prisma.QueryCountArgs<ExtArgs>
            result: $Utils.Optional<QueryCountAggregateOutputType> | number
          }
        }
      }
      ChatbotSession: {
        payload: Prisma.$ChatbotSessionPayload<ExtArgs>
        fields: Prisma.ChatbotSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ChatbotSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ChatbotSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          findFirst: {
            args: Prisma.ChatbotSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ChatbotSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          findMany: {
            args: Prisma.ChatbotSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>[]
          }
          create: {
            args: Prisma.ChatbotSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          createMany: {
            args: Prisma.ChatbotSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ChatbotSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>[]
          }
          delete: {
            args: Prisma.ChatbotSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          update: {
            args: Prisma.ChatbotSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          deleteMany: {
            args: Prisma.ChatbotSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ChatbotSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ChatbotSessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>[]
          }
          upsert: {
            args: Prisma.ChatbotSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ChatbotSessionPayload>
          }
          aggregate: {
            args: Prisma.ChatbotSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatbotSession>
          }
          groupBy: {
            args: Prisma.ChatbotSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatbotSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ChatbotSessionCountArgs<ExtArgs>
            result: $Utils.Optional<ChatbotSessionCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Faq: {
        payload: Prisma.$FaqPayload<ExtArgs>
        fields: Prisma.FaqFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FaqFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FaqFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findFirst: {
            args: Prisma.FaqFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FaqFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          findMany: {
            args: Prisma.FaqFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          create: {
            args: Prisma.FaqCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          createMany: {
            args: Prisma.FaqCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FaqCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          delete: {
            args: Prisma.FaqDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          update: {
            args: Prisma.FaqUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          deleteMany: {
            args: Prisma.FaqDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FaqUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FaqUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>[]
          }
          upsert: {
            args: Prisma.FaqUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FaqPayload>
          }
          aggregate: {
            args: Prisma.FaqAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFaq>
          }
          groupBy: {
            args: Prisma.FaqGroupByArgs<ExtArgs>
            result: $Utils.Optional<FaqGroupByOutputType>[]
          }
          count: {
            args: Prisma.FaqCountArgs<ExtArgs>
            result: $Utils.Optional<FaqCountAggregateOutputType> | number
          }
        }
      }
      QuestionKeyword: {
        payload: Prisma.$QuestionKeywordPayload<ExtArgs>
        fields: Prisma.QuestionKeywordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionKeywordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionKeywordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          findFirst: {
            args: Prisma.QuestionKeywordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionKeywordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          findMany: {
            args: Prisma.QuestionKeywordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>[]
          }
          create: {
            args: Prisma.QuestionKeywordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          createMany: {
            args: Prisma.QuestionKeywordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionKeywordCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>[]
          }
          delete: {
            args: Prisma.QuestionKeywordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          update: {
            args: Prisma.QuestionKeywordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          deleteMany: {
            args: Prisma.QuestionKeywordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionKeywordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.QuestionKeywordUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>[]
          }
          upsert: {
            args: Prisma.QuestionKeywordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionKeywordPayload>
          }
          aggregate: {
            args: Prisma.QuestionKeywordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestionKeyword>
          }
          groupBy: {
            args: Prisma.QuestionKeywordGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionKeywordGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionKeywordCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionKeywordCountAggregateOutputType> | number
          }
        }
      }
      Greeting: {
        payload: Prisma.$GreetingPayload<ExtArgs>
        fields: Prisma.GreetingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GreetingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GreetingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          findFirst: {
            args: Prisma.GreetingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GreetingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          findMany: {
            args: Prisma.GreetingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>[]
          }
          create: {
            args: Prisma.GreetingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          createMany: {
            args: Prisma.GreetingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GreetingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>[]
          }
          delete: {
            args: Prisma.GreetingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          update: {
            args: Prisma.GreetingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          deleteMany: {
            args: Prisma.GreetingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GreetingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GreetingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>[]
          }
          upsert: {
            args: Prisma.GreetingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GreetingPayload>
          }
          aggregate: {
            args: Prisma.GreetingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGreeting>
          }
          groupBy: {
            args: Prisma.GreetingGroupByArgs<ExtArgs>
            result: $Utils.Optional<GreetingGroupByOutputType>[]
          }
          count: {
            args: Prisma.GreetingCountArgs<ExtArgs>
            result: $Utils.Optional<GreetingCountAggregateOutputType> | number
          }
        }
      }
      SchoolDetail: {
        payload: Prisma.$SchoolDetailPayload<ExtArgs>
        fields: Prisma.SchoolDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolDetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolDetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          findFirst: {
            args: Prisma.SchoolDetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolDetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          findMany: {
            args: Prisma.SchoolDetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>[]
          }
          create: {
            args: Prisma.SchoolDetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          createMany: {
            args: Prisma.SchoolDetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolDetailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>[]
          }
          delete: {
            args: Prisma.SchoolDetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          update: {
            args: Prisma.SchoolDetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          deleteMany: {
            args: Prisma.SchoolDetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolDetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SchoolDetailUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>[]
          }
          upsert: {
            args: Prisma.SchoolDetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolDetailPayload>
          }
          aggregate: {
            args: Prisma.SchoolDetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchoolDetail>
          }
          groupBy: {
            args: Prisma.SchoolDetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolDetailGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolDetailCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolDetailCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ContactUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      SchoolFaq: {
        payload: Prisma.$SchoolFaqPayload<ExtArgs>
        fields: Prisma.SchoolFaqFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SchoolFaqFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SchoolFaqFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          findFirst: {
            args: Prisma.SchoolFaqFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SchoolFaqFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          findMany: {
            args: Prisma.SchoolFaqFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>[]
          }
          create: {
            args: Prisma.SchoolFaqCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          createMany: {
            args: Prisma.SchoolFaqCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SchoolFaqCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>[]
          }
          delete: {
            args: Prisma.SchoolFaqDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          update: {
            args: Prisma.SchoolFaqUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          deleteMany: {
            args: Prisma.SchoolFaqDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SchoolFaqUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SchoolFaqUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>[]
          }
          upsert: {
            args: Prisma.SchoolFaqUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchoolFaqPayload>
          }
          aggregate: {
            args: Prisma.SchoolFaqAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchoolFaq>
          }
          groupBy: {
            args: Prisma.SchoolFaqGroupByArgs<ExtArgs>
            result: $Utils.Optional<SchoolFaqGroupByOutputType>[]
          }
          count: {
            args: Prisma.SchoolFaqCountArgs<ExtArgs>
            result: $Utils.Optional<SchoolFaqCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    query?: QueryOmit
    chatbotSession?: ChatbotSessionOmit
    feedback?: FeedbackOmit
    teacher?: TeacherOmit
    department?: DepartmentOmit
    course?: CourseOmit
    faq?: FaqOmit
    questionKeyword?: QuestionKeywordOmit
    greeting?: GreetingOmit
    schoolDetail?: SchoolDetailOmit
    contact?: ContactOmit
    schoolFaq?: SchoolFaqOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    queries: number
    feedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    queries?: boolean | UserCountOutputTypeCountQueriesArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotSessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQueriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QueryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type QueryCountOutputType
   */

  export type QueryCountOutputType = {
    feedback: number
  }

  export type QueryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedback?: boolean | QueryCountOutputTypeCountFeedbackArgs
  }

  // Custom InputTypes
  /**
   * QueryCountOutputType without action
   */
  export type QueryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QueryCountOutputType
     */
    select?: QueryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QueryCountOutputType without action
   */
  export type QueryCountOutputTypeCountFeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type ChatbotSessionCountOutputType
   */

  export type ChatbotSessionCountOutputType = {
    queries: number
  }

  export type ChatbotSessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    queries?: boolean | ChatbotSessionCountOutputTypeCountQueriesArgs
  }

  // Custom InputTypes
  /**
   * ChatbotSessionCountOutputType without action
   */
  export type ChatbotSessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSessionCountOutputType
     */
    select?: ChatbotSessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatbotSessionCountOutputType without action
   */
  export type ChatbotSessionCountOutputTypeCountQueriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QueryWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    teachers: number
    courses: number
    faqs: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | DepartmentCountOutputTypeCountTeachersArgs
    courses?: boolean | DepartmentCountOutputTypeCountCoursesArgs
    faqs?: boolean | DepartmentCountOutputTypeCountFaqsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountFaqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqWhereInput
  }


  /**
   * Count Type FaqCountOutputType
   */

  export type FaqCountOutputType = {
    keywords: number
  }

  export type FaqCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    keywords?: boolean | FaqCountOutputTypeCountKeywordsArgs
  }

  // Custom InputTypes
  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FaqCountOutputType
     */
    select?: FaqCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FaqCountOutputType without action
   */
  export type FaqCountOutputTypeCountKeywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionKeywordWhereInput
  }


  /**
   * Count Type SchoolDetailCountOutputType
   */

  export type SchoolDetailCountOutputType = {
    contacts: number
    school_faqs: number
  }

  export type SchoolDetailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | SchoolDetailCountOutputTypeCountContactsArgs
    school_faqs?: boolean | SchoolDetailCountOutputTypeCountSchool_faqsArgs
  }

  // Custom InputTypes
  /**
   * SchoolDetailCountOutputType without action
   */
  export type SchoolDetailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetailCountOutputType
     */
    select?: SchoolDetailCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SchoolDetailCountOutputType without action
   */
  export type SchoolDetailCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * SchoolDetailCountOutputType without action
   */
  export type SchoolDetailCountOutputTypeCountSchool_faqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolFaqWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    last_active: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    last_active: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    created_at: number
    last_active: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    created_at?: true
    last_active?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    created_at?: true
    last_active?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    created_at?: true
    last_active?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    created_at: Date
    last_active: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    last_active?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    queries?: boolean | User$queriesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    last_active?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    last_active?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    created_at?: boolean
    last_active?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "created_at" | "last_active", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    queries?: boolean | User$queriesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$ChatbotSessionPayload<ExtArgs>[]
      queries: Prisma.$QueryPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      created_at: Date
      last_active: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    queries<T extends User$queriesArgs<ExtArgs> = {}>(args?: Subset<T, User$queriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly last_active: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    where?: ChatbotSessionWhereInput
    orderBy?: ChatbotSessionOrderByWithRelationInput | ChatbotSessionOrderByWithRelationInput[]
    cursor?: ChatbotSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatbotSessionScalarFieldEnum | ChatbotSessionScalarFieldEnum[]
  }

  /**
   * User.queries
   */
  export type User$queriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    where?: QueryWhereInput
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    cursor?: QueryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QueryScalarFieldEnum | QueryScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Query
   */

  export type AggregateQuery = {
    _count: QueryCountAggregateOutputType | null
    _avg: QueryAvgAggregateOutputType | null
    _sum: QuerySumAggregateOutputType | null
    _min: QueryMinAggregateOutputType | null
    _max: QueryMaxAggregateOutputType | null
  }

  export type QueryAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_session_id: number | null
  }

  export type QuerySumAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_session_id: number | null
  }

  export type QueryMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_session_id: number | null
    query_text: string | null
    created_at: Date | null
  }

  export type QueryMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_session_id: number | null
    query_text: string | null
    created_at: Date | null
  }

  export type QueryCountAggregateOutputType = {
    id: number
    user_id: number
    chatbot_session_id: number
    query_text: number
    users_data_inputed: number
    chatbot_response: number
    created_at: number
    _all: number
  }


  export type QueryAvgAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_session_id?: true
  }

  export type QuerySumAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_session_id?: true
  }

  export type QueryMinAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_session_id?: true
    query_text?: true
    created_at?: true
  }

  export type QueryMaxAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_session_id?: true
    query_text?: true
    created_at?: true
  }

  export type QueryCountAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_session_id?: true
    query_text?: true
    users_data_inputed?: true
    chatbot_response?: true
    created_at?: true
    _all?: true
  }

  export type QueryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Query to aggregate.
     */
    where?: QueryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Queries to fetch.
     */
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QueryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Queries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Queries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Queries
    **/
    _count?: true | QueryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QueryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuerySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QueryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QueryMaxAggregateInputType
  }

  export type GetQueryAggregateType<T extends QueryAggregateArgs> = {
        [P in keyof T & keyof AggregateQuery]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuery[P]>
      : GetScalarType<T[P], AggregateQuery[P]>
  }




  export type QueryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QueryWhereInput
    orderBy?: QueryOrderByWithAggregationInput | QueryOrderByWithAggregationInput[]
    by: QueryScalarFieldEnum[] | QueryScalarFieldEnum
    having?: QueryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QueryCountAggregateInputType | true
    _avg?: QueryAvgAggregateInputType
    _sum?: QuerySumAggregateInputType
    _min?: QueryMinAggregateInputType
    _max?: QueryMaxAggregateInputType
  }

  export type QueryGroupByOutputType = {
    id: number
    user_id: number
    chatbot_session_id: number
    query_text: string | null
    users_data_inputed: string[]
    chatbot_response: string[]
    created_at: Date | null
    _count: QueryCountAggregateOutputType | null
    _avg: QueryAvgAggregateOutputType | null
    _sum: QuerySumAggregateOutputType | null
    _min: QueryMinAggregateOutputType | null
    _max: QueryMaxAggregateOutputType | null
  }

  type GetQueryGroupByPayload<T extends QueryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QueryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QueryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QueryGroupByOutputType[P]>
            : GetScalarType<T[P], QueryGroupByOutputType[P]>
        }
      >
    >


  export type QuerySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_session_id?: boolean
    query_text?: boolean
    users_data_inputed?: boolean
    chatbot_response?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
    feedback?: boolean | Query$feedbackArgs<ExtArgs>
    _count?: boolean | QueryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["query"]>

  export type QuerySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_session_id?: boolean
    query_text?: boolean
    users_data_inputed?: boolean
    chatbot_response?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["query"]>

  export type QuerySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_session_id?: boolean
    query_text?: boolean
    users_data_inputed?: boolean
    chatbot_response?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["query"]>

  export type QuerySelectScalar = {
    id?: boolean
    user_id?: boolean
    chatbot_session_id?: boolean
    query_text?: boolean
    users_data_inputed?: boolean
    chatbot_response?: boolean
    created_at?: boolean
  }

  export type QueryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "chatbot_session_id" | "query_text" | "users_data_inputed" | "chatbot_response" | "created_at", ExtArgs["result"]["query"]>
  export type QueryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
    feedback?: boolean | Query$feedbackArgs<ExtArgs>
    _count?: boolean | QueryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QueryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
  }
  export type QueryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    session?: boolean | ChatbotSessionDefaultArgs<ExtArgs>
  }

  export type $QueryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Query"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      session: Prisma.$ChatbotSessionPayload<ExtArgs>
      feedback: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      chatbot_session_id: number
      query_text: string | null
      users_data_inputed: string[]
      chatbot_response: string[]
      created_at: Date | null
    }, ExtArgs["result"]["query"]>
    composites: {}
  }

  type QueryGetPayload<S extends boolean | null | undefined | QueryDefaultArgs> = $Result.GetResult<Prisma.$QueryPayload, S>

  type QueryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QueryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QueryCountAggregateInputType | true
    }

  export interface QueryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Query'], meta: { name: 'Query' } }
    /**
     * Find zero or one Query that matches the filter.
     * @param {QueryFindUniqueArgs} args - Arguments to find a Query
     * @example
     * // Get one Query
     * const query = await prisma.query.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QueryFindUniqueArgs>(args: SelectSubset<T, QueryFindUniqueArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Query that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QueryFindUniqueOrThrowArgs} args - Arguments to find a Query
     * @example
     * // Get one Query
     * const query = await prisma.query.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QueryFindUniqueOrThrowArgs>(args: SelectSubset<T, QueryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Query that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryFindFirstArgs} args - Arguments to find a Query
     * @example
     * // Get one Query
     * const query = await prisma.query.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QueryFindFirstArgs>(args?: SelectSubset<T, QueryFindFirstArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Query that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryFindFirstOrThrowArgs} args - Arguments to find a Query
     * @example
     * // Get one Query
     * const query = await prisma.query.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QueryFindFirstOrThrowArgs>(args?: SelectSubset<T, QueryFindFirstOrThrowArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Queries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Queries
     * const queries = await prisma.query.findMany()
     * 
     * // Get first 10 Queries
     * const queries = await prisma.query.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const queryWithIdOnly = await prisma.query.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QueryFindManyArgs>(args?: SelectSubset<T, QueryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Query.
     * @param {QueryCreateArgs} args - Arguments to create a Query.
     * @example
     * // Create one Query
     * const Query = await prisma.query.create({
     *   data: {
     *     // ... data to create a Query
     *   }
     * })
     * 
     */
    create<T extends QueryCreateArgs>(args: SelectSubset<T, QueryCreateArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Queries.
     * @param {QueryCreateManyArgs} args - Arguments to create many Queries.
     * @example
     * // Create many Queries
     * const query = await prisma.query.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QueryCreateManyArgs>(args?: SelectSubset<T, QueryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Queries and returns the data saved in the database.
     * @param {QueryCreateManyAndReturnArgs} args - Arguments to create many Queries.
     * @example
     * // Create many Queries
     * const query = await prisma.query.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Queries and only return the `id`
     * const queryWithIdOnly = await prisma.query.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QueryCreateManyAndReturnArgs>(args?: SelectSubset<T, QueryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Query.
     * @param {QueryDeleteArgs} args - Arguments to delete one Query.
     * @example
     * // Delete one Query
     * const Query = await prisma.query.delete({
     *   where: {
     *     // ... filter to delete one Query
     *   }
     * })
     * 
     */
    delete<T extends QueryDeleteArgs>(args: SelectSubset<T, QueryDeleteArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Query.
     * @param {QueryUpdateArgs} args - Arguments to update one Query.
     * @example
     * // Update one Query
     * const query = await prisma.query.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QueryUpdateArgs>(args: SelectSubset<T, QueryUpdateArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Queries.
     * @param {QueryDeleteManyArgs} args - Arguments to filter Queries to delete.
     * @example
     * // Delete a few Queries
     * const { count } = await prisma.query.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QueryDeleteManyArgs>(args?: SelectSubset<T, QueryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Queries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Queries
     * const query = await prisma.query.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QueryUpdateManyArgs>(args: SelectSubset<T, QueryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Queries and returns the data updated in the database.
     * @param {QueryUpdateManyAndReturnArgs} args - Arguments to update many Queries.
     * @example
     * // Update many Queries
     * const query = await prisma.query.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Queries and only return the `id`
     * const queryWithIdOnly = await prisma.query.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QueryUpdateManyAndReturnArgs>(args: SelectSubset<T, QueryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Query.
     * @param {QueryUpsertArgs} args - Arguments to update or create a Query.
     * @example
     * // Update or create a Query
     * const query = await prisma.query.upsert({
     *   create: {
     *     // ... data to create a Query
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Query we want to update
     *   }
     * })
     */
    upsert<T extends QueryUpsertArgs>(args: SelectSubset<T, QueryUpsertArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Queries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryCountArgs} args - Arguments to filter Queries to count.
     * @example
     * // Count the number of Queries
     * const count = await prisma.query.count({
     *   where: {
     *     // ... the filter for the Queries we want to count
     *   }
     * })
    **/
    count<T extends QueryCountArgs>(
      args?: Subset<T, QueryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QueryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Query.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QueryAggregateArgs>(args: Subset<T, QueryAggregateArgs>): Prisma.PrismaPromise<GetQueryAggregateType<T>>

    /**
     * Group by Query.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QueryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QueryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QueryGroupByArgs['orderBy'] }
        : { orderBy?: QueryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QueryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQueryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Query model
   */
  readonly fields: QueryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Query.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QueryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    session<T extends ChatbotSessionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotSessionDefaultArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feedback<T extends Query$feedbackArgs<ExtArgs> = {}>(args?: Subset<T, Query$feedbackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Query model
   */
  interface QueryFieldRefs {
    readonly id: FieldRef<"Query", 'Int'>
    readonly user_id: FieldRef<"Query", 'Int'>
    readonly chatbot_session_id: FieldRef<"Query", 'Int'>
    readonly query_text: FieldRef<"Query", 'String'>
    readonly users_data_inputed: FieldRef<"Query", 'String[]'>
    readonly chatbot_response: FieldRef<"Query", 'String[]'>
    readonly created_at: FieldRef<"Query", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Query findUnique
   */
  export type QueryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter, which Query to fetch.
     */
    where: QueryWhereUniqueInput
  }

  /**
   * Query findUniqueOrThrow
   */
  export type QueryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter, which Query to fetch.
     */
    where: QueryWhereUniqueInput
  }

  /**
   * Query findFirst
   */
  export type QueryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter, which Query to fetch.
     */
    where?: QueryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Queries to fetch.
     */
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Queries.
     */
    cursor?: QueryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Queries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Queries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Queries.
     */
    distinct?: QueryScalarFieldEnum | QueryScalarFieldEnum[]
  }

  /**
   * Query findFirstOrThrow
   */
  export type QueryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter, which Query to fetch.
     */
    where?: QueryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Queries to fetch.
     */
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Queries.
     */
    cursor?: QueryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Queries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Queries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Queries.
     */
    distinct?: QueryScalarFieldEnum | QueryScalarFieldEnum[]
  }

  /**
   * Query findMany
   */
  export type QueryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter, which Queries to fetch.
     */
    where?: QueryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Queries to fetch.
     */
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Queries.
     */
    cursor?: QueryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Queries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Queries.
     */
    skip?: number
    distinct?: QueryScalarFieldEnum | QueryScalarFieldEnum[]
  }

  /**
   * Query create
   */
  export type QueryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * The data needed to create a Query.
     */
    data: XOR<QueryCreateInput, QueryUncheckedCreateInput>
  }

  /**
   * Query createMany
   */
  export type QueryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Queries.
     */
    data: QueryCreateManyInput | QueryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Query createManyAndReturn
   */
  export type QueryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * The data used to create many Queries.
     */
    data: QueryCreateManyInput | QueryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Query update
   */
  export type QueryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * The data needed to update a Query.
     */
    data: XOR<QueryUpdateInput, QueryUncheckedUpdateInput>
    /**
     * Choose, which Query to update.
     */
    where: QueryWhereUniqueInput
  }

  /**
   * Query updateMany
   */
  export type QueryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Queries.
     */
    data: XOR<QueryUpdateManyMutationInput, QueryUncheckedUpdateManyInput>
    /**
     * Filter which Queries to update
     */
    where?: QueryWhereInput
    /**
     * Limit how many Queries to update.
     */
    limit?: number
  }

  /**
   * Query updateManyAndReturn
   */
  export type QueryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * The data used to update Queries.
     */
    data: XOR<QueryUpdateManyMutationInput, QueryUncheckedUpdateManyInput>
    /**
     * Filter which Queries to update
     */
    where?: QueryWhereInput
    /**
     * Limit how many Queries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Query upsert
   */
  export type QueryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * The filter to search for the Query to update in case it exists.
     */
    where: QueryWhereUniqueInput
    /**
     * In case the Query found by the `where` argument doesn't exist, create a new Query with this data.
     */
    create: XOR<QueryCreateInput, QueryUncheckedCreateInput>
    /**
     * In case the Query was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QueryUpdateInput, QueryUncheckedUpdateInput>
  }

  /**
   * Query delete
   */
  export type QueryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    /**
     * Filter which Query to delete.
     */
    where: QueryWhereUniqueInput
  }

  /**
   * Query deleteMany
   */
  export type QueryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Queries to delete
     */
    where?: QueryWhereInput
    /**
     * Limit how many Queries to delete.
     */
    limit?: number
  }

  /**
   * Query.feedback
   */
  export type Query$feedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Query without action
   */
  export type QueryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
  }


  /**
   * Model ChatbotSession
   */

  export type AggregateChatbotSession = {
    _count: ChatbotSessionCountAggregateOutputType | null
    _avg: ChatbotSessionAvgAggregateOutputType | null
    _sum: ChatbotSessionSumAggregateOutputType | null
    _min: ChatbotSessionMinAggregateOutputType | null
    _max: ChatbotSessionMaxAggregateOutputType | null
  }

  export type ChatbotSessionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_queries: number | null
  }

  export type ChatbotSessionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    total_queries: number | null
  }

  export type ChatbotSessionMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_response: string | null
    response_time: Date | null
    total_queries: number | null
  }

  export type ChatbotSessionMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    chatbot_response: string | null
    response_time: Date | null
    total_queries: number | null
  }

  export type ChatbotSessionCountAggregateOutputType = {
    id: number
    user_id: number
    chatbot_response: number
    response_time: number
    total_queries: number
    _all: number
  }


  export type ChatbotSessionAvgAggregateInputType = {
    id?: true
    user_id?: true
    total_queries?: true
  }

  export type ChatbotSessionSumAggregateInputType = {
    id?: true
    user_id?: true
    total_queries?: true
  }

  export type ChatbotSessionMinAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_response?: true
    response_time?: true
    total_queries?: true
  }

  export type ChatbotSessionMaxAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_response?: true
    response_time?: true
    total_queries?: true
  }

  export type ChatbotSessionCountAggregateInputType = {
    id?: true
    user_id?: true
    chatbot_response?: true
    response_time?: true
    total_queries?: true
    _all?: true
  }

  export type ChatbotSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotSession to aggregate.
     */
    where?: ChatbotSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotSessions to fetch.
     */
    orderBy?: ChatbotSessionOrderByWithRelationInput | ChatbotSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChatbotSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChatbotSessions
    **/
    _count?: true | ChatbotSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ChatbotSessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ChatbotSessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatbotSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatbotSessionMaxAggregateInputType
  }

  export type GetChatbotSessionAggregateType<T extends ChatbotSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateChatbotSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatbotSession[P]>
      : GetScalarType<T[P], AggregateChatbotSession[P]>
  }




  export type ChatbotSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ChatbotSessionWhereInput
    orderBy?: ChatbotSessionOrderByWithAggregationInput | ChatbotSessionOrderByWithAggregationInput[]
    by: ChatbotSessionScalarFieldEnum[] | ChatbotSessionScalarFieldEnum
    having?: ChatbotSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatbotSessionCountAggregateInputType | true
    _avg?: ChatbotSessionAvgAggregateInputType
    _sum?: ChatbotSessionSumAggregateInputType
    _min?: ChatbotSessionMinAggregateInputType
    _max?: ChatbotSessionMaxAggregateInputType
  }

  export type ChatbotSessionGroupByOutputType = {
    id: number
    user_id: number
    chatbot_response: string | null
    response_time: Date | null
    total_queries: number | null
    _count: ChatbotSessionCountAggregateOutputType | null
    _avg: ChatbotSessionAvgAggregateOutputType | null
    _sum: ChatbotSessionSumAggregateOutputType | null
    _min: ChatbotSessionMinAggregateOutputType | null
    _max: ChatbotSessionMaxAggregateOutputType | null
  }

  type GetChatbotSessionGroupByPayload<T extends ChatbotSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatbotSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatbotSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatbotSessionGroupByOutputType[P]>
            : GetScalarType<T[P], ChatbotSessionGroupByOutputType[P]>
        }
      >
    >


  export type ChatbotSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_response?: boolean
    response_time?: boolean
    total_queries?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    queries?: boolean | ChatbotSession$queriesArgs<ExtArgs>
    _count?: boolean | ChatbotSessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatbotSession"]>

  export type ChatbotSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_response?: boolean
    response_time?: boolean
    total_queries?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatbotSession"]>

  export type ChatbotSessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    chatbot_response?: boolean
    response_time?: boolean
    total_queries?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatbotSession"]>

  export type ChatbotSessionSelectScalar = {
    id?: boolean
    user_id?: boolean
    chatbot_response?: boolean
    response_time?: boolean
    total_queries?: boolean
  }

  export type ChatbotSessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "chatbot_response" | "response_time" | "total_queries", ExtArgs["result"]["chatbotSession"]>
  export type ChatbotSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    queries?: boolean | ChatbotSession$queriesArgs<ExtArgs>
    _count?: boolean | ChatbotSessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ChatbotSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ChatbotSessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ChatbotSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ChatbotSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      queries: Prisma.$QueryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: number
      chatbot_response: string | null
      response_time: Date | null
      total_queries: number | null
    }, ExtArgs["result"]["chatbotSession"]>
    composites: {}
  }

  type ChatbotSessionGetPayload<S extends boolean | null | undefined | ChatbotSessionDefaultArgs> = $Result.GetResult<Prisma.$ChatbotSessionPayload, S>

  type ChatbotSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ChatbotSessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ChatbotSessionCountAggregateInputType | true
    }

  export interface ChatbotSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ChatbotSession'], meta: { name: 'ChatbotSession' } }
    /**
     * Find zero or one ChatbotSession that matches the filter.
     * @param {ChatbotSessionFindUniqueArgs} args - Arguments to find a ChatbotSession
     * @example
     * // Get one ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ChatbotSessionFindUniqueArgs>(args: SelectSubset<T, ChatbotSessionFindUniqueArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ChatbotSession that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ChatbotSessionFindUniqueOrThrowArgs} args - Arguments to find a ChatbotSession
     * @example
     * // Get one ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ChatbotSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, ChatbotSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionFindFirstArgs} args - Arguments to find a ChatbotSession
     * @example
     * // Get one ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ChatbotSessionFindFirstArgs>(args?: SelectSubset<T, ChatbotSessionFindFirstArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ChatbotSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionFindFirstOrThrowArgs} args - Arguments to find a ChatbotSession
     * @example
     * // Get one ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ChatbotSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, ChatbotSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ChatbotSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatbotSessions
     * const chatbotSessions = await prisma.chatbotSession.findMany()
     * 
     * // Get first 10 ChatbotSessions
     * const chatbotSessions = await prisma.chatbotSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatbotSessionWithIdOnly = await prisma.chatbotSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ChatbotSessionFindManyArgs>(args?: SelectSubset<T, ChatbotSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ChatbotSession.
     * @param {ChatbotSessionCreateArgs} args - Arguments to create a ChatbotSession.
     * @example
     * // Create one ChatbotSession
     * const ChatbotSession = await prisma.chatbotSession.create({
     *   data: {
     *     // ... data to create a ChatbotSession
     *   }
     * })
     * 
     */
    create<T extends ChatbotSessionCreateArgs>(args: SelectSubset<T, ChatbotSessionCreateArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ChatbotSessions.
     * @param {ChatbotSessionCreateManyArgs} args - Arguments to create many ChatbotSessions.
     * @example
     * // Create many ChatbotSessions
     * const chatbotSession = await prisma.chatbotSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ChatbotSessionCreateManyArgs>(args?: SelectSubset<T, ChatbotSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ChatbotSessions and returns the data saved in the database.
     * @param {ChatbotSessionCreateManyAndReturnArgs} args - Arguments to create many ChatbotSessions.
     * @example
     * // Create many ChatbotSessions
     * const chatbotSession = await prisma.chatbotSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ChatbotSessions and only return the `id`
     * const chatbotSessionWithIdOnly = await prisma.chatbotSession.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ChatbotSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, ChatbotSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ChatbotSession.
     * @param {ChatbotSessionDeleteArgs} args - Arguments to delete one ChatbotSession.
     * @example
     * // Delete one ChatbotSession
     * const ChatbotSession = await prisma.chatbotSession.delete({
     *   where: {
     *     // ... filter to delete one ChatbotSession
     *   }
     * })
     * 
     */
    delete<T extends ChatbotSessionDeleteArgs>(args: SelectSubset<T, ChatbotSessionDeleteArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ChatbotSession.
     * @param {ChatbotSessionUpdateArgs} args - Arguments to update one ChatbotSession.
     * @example
     * // Update one ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ChatbotSessionUpdateArgs>(args: SelectSubset<T, ChatbotSessionUpdateArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ChatbotSessions.
     * @param {ChatbotSessionDeleteManyArgs} args - Arguments to filter ChatbotSessions to delete.
     * @example
     * // Delete a few ChatbotSessions
     * const { count } = await prisma.chatbotSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ChatbotSessionDeleteManyArgs>(args?: SelectSubset<T, ChatbotSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatbotSessions
     * const chatbotSession = await prisma.chatbotSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ChatbotSessionUpdateManyArgs>(args: SelectSubset<T, ChatbotSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatbotSessions and returns the data updated in the database.
     * @param {ChatbotSessionUpdateManyAndReturnArgs} args - Arguments to update many ChatbotSessions.
     * @example
     * // Update many ChatbotSessions
     * const chatbotSession = await prisma.chatbotSession.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ChatbotSessions and only return the `id`
     * const chatbotSessionWithIdOnly = await prisma.chatbotSession.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ChatbotSessionUpdateManyAndReturnArgs>(args: SelectSubset<T, ChatbotSessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ChatbotSession.
     * @param {ChatbotSessionUpsertArgs} args - Arguments to update or create a ChatbotSession.
     * @example
     * // Update or create a ChatbotSession
     * const chatbotSession = await prisma.chatbotSession.upsert({
     *   create: {
     *     // ... data to create a ChatbotSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatbotSession we want to update
     *   }
     * })
     */
    upsert<T extends ChatbotSessionUpsertArgs>(args: SelectSubset<T, ChatbotSessionUpsertArgs<ExtArgs>>): Prisma__ChatbotSessionClient<$Result.GetResult<Prisma.$ChatbotSessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ChatbotSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionCountArgs} args - Arguments to filter ChatbotSessions to count.
     * @example
     * // Count the number of ChatbotSessions
     * const count = await prisma.chatbotSession.count({
     *   where: {
     *     // ... the filter for the ChatbotSessions we want to count
     *   }
     * })
    **/
    count<T extends ChatbotSessionCountArgs>(
      args?: Subset<T, ChatbotSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatbotSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatbotSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatbotSessionAggregateArgs>(args: Subset<T, ChatbotSessionAggregateArgs>): Prisma.PrismaPromise<GetChatbotSessionAggregateType<T>>

    /**
     * Group by ChatbotSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatbotSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChatbotSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChatbotSessionGroupByArgs['orderBy'] }
        : { orderBy?: ChatbotSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChatbotSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatbotSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ChatbotSession model
   */
  readonly fields: ChatbotSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ChatbotSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ChatbotSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    queries<T extends ChatbotSession$queriesArgs<ExtArgs> = {}>(args?: Subset<T, ChatbotSession$queriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ChatbotSession model
   */
  interface ChatbotSessionFieldRefs {
    readonly id: FieldRef<"ChatbotSession", 'Int'>
    readonly user_id: FieldRef<"ChatbotSession", 'Int'>
    readonly chatbot_response: FieldRef<"ChatbotSession", 'String'>
    readonly response_time: FieldRef<"ChatbotSession", 'DateTime'>
    readonly total_queries: FieldRef<"ChatbotSession", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ChatbotSession findUnique
   */
  export type ChatbotSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotSession to fetch.
     */
    where: ChatbotSessionWhereUniqueInput
  }

  /**
   * ChatbotSession findUniqueOrThrow
   */
  export type ChatbotSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotSession to fetch.
     */
    where: ChatbotSessionWhereUniqueInput
  }

  /**
   * ChatbotSession findFirst
   */
  export type ChatbotSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotSession to fetch.
     */
    where?: ChatbotSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotSessions to fetch.
     */
    orderBy?: ChatbotSessionOrderByWithRelationInput | ChatbotSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotSessions.
     */
    cursor?: ChatbotSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotSessions.
     */
    distinct?: ChatbotSessionScalarFieldEnum | ChatbotSessionScalarFieldEnum[]
  }

  /**
   * ChatbotSession findFirstOrThrow
   */
  export type ChatbotSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotSession to fetch.
     */
    where?: ChatbotSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotSessions to fetch.
     */
    orderBy?: ChatbotSessionOrderByWithRelationInput | ChatbotSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChatbotSessions.
     */
    cursor?: ChatbotSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChatbotSessions.
     */
    distinct?: ChatbotSessionScalarFieldEnum | ChatbotSessionScalarFieldEnum[]
  }

  /**
   * ChatbotSession findMany
   */
  export type ChatbotSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter, which ChatbotSessions to fetch.
     */
    where?: ChatbotSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChatbotSessions to fetch.
     */
    orderBy?: ChatbotSessionOrderByWithRelationInput | ChatbotSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChatbotSessions.
     */
    cursor?: ChatbotSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChatbotSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChatbotSessions.
     */
    skip?: number
    distinct?: ChatbotSessionScalarFieldEnum | ChatbotSessionScalarFieldEnum[]
  }

  /**
   * ChatbotSession create
   */
  export type ChatbotSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a ChatbotSession.
     */
    data: XOR<ChatbotSessionCreateInput, ChatbotSessionUncheckedCreateInput>
  }

  /**
   * ChatbotSession createMany
   */
  export type ChatbotSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ChatbotSessions.
     */
    data: ChatbotSessionCreateManyInput | ChatbotSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ChatbotSession createManyAndReturn
   */
  export type ChatbotSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * The data used to create many ChatbotSessions.
     */
    data: ChatbotSessionCreateManyInput | ChatbotSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatbotSession update
   */
  export type ChatbotSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a ChatbotSession.
     */
    data: XOR<ChatbotSessionUpdateInput, ChatbotSessionUncheckedUpdateInput>
    /**
     * Choose, which ChatbotSession to update.
     */
    where: ChatbotSessionWhereUniqueInput
  }

  /**
   * ChatbotSession updateMany
   */
  export type ChatbotSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ChatbotSessions.
     */
    data: XOR<ChatbotSessionUpdateManyMutationInput, ChatbotSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotSessions to update
     */
    where?: ChatbotSessionWhereInput
    /**
     * Limit how many ChatbotSessions to update.
     */
    limit?: number
  }

  /**
   * ChatbotSession updateManyAndReturn
   */
  export type ChatbotSessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * The data used to update ChatbotSessions.
     */
    data: XOR<ChatbotSessionUpdateManyMutationInput, ChatbotSessionUncheckedUpdateManyInput>
    /**
     * Filter which ChatbotSessions to update
     */
    where?: ChatbotSessionWhereInput
    /**
     * Limit how many ChatbotSessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ChatbotSession upsert
   */
  export type ChatbotSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the ChatbotSession to update in case it exists.
     */
    where: ChatbotSessionWhereUniqueInput
    /**
     * In case the ChatbotSession found by the `where` argument doesn't exist, create a new ChatbotSession with this data.
     */
    create: XOR<ChatbotSessionCreateInput, ChatbotSessionUncheckedCreateInput>
    /**
     * In case the ChatbotSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChatbotSessionUpdateInput, ChatbotSessionUncheckedUpdateInput>
  }

  /**
   * ChatbotSession delete
   */
  export type ChatbotSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
    /**
     * Filter which ChatbotSession to delete.
     */
    where: ChatbotSessionWhereUniqueInput
  }

  /**
   * ChatbotSession deleteMany
   */
  export type ChatbotSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ChatbotSessions to delete
     */
    where?: ChatbotSessionWhereInput
    /**
     * Limit how many ChatbotSessions to delete.
     */
    limit?: number
  }

  /**
   * ChatbotSession.queries
   */
  export type ChatbotSession$queriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Query
     */
    select?: QuerySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Query
     */
    omit?: QueryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QueryInclude<ExtArgs> | null
    where?: QueryWhereInput
    orderBy?: QueryOrderByWithRelationInput | QueryOrderByWithRelationInput[]
    cursor?: QueryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QueryScalarFieldEnum | QueryScalarFieldEnum[]
  }

  /**
   * ChatbotSession without action
   */
  export type ChatbotSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatbotSession
     */
    select?: ChatbotSessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ChatbotSession
     */
    omit?: ChatbotSessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ChatbotSessionInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    id: number | null
    query_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    id: number | null
    query_id: number | null
    user_id: number | null
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: number | null
    query_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    resolved_issue: boolean | null
    created_at: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: number | null
    query_id: number | null
    user_id: number | null
    rating: number | null
    comment: string | null
    resolved_issue: boolean | null
    created_at: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    query_id: number
    user_id: number
    rating: number
    comment: number
    resolved_issue: number
    created_at: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    id?: true
    query_id?: true
    user_id?: true
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    id?: true
    query_id?: true
    user_id?: true
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    query_id?: true
    user_id?: true
    rating?: true
    comment?: true
    resolved_issue?: true
    created_at?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    query_id?: true
    user_id?: true
    rating?: true
    comment?: true
    resolved_issue?: true
    created_at?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    query_id?: true
    user_id?: true
    rating?: true
    comment?: true
    resolved_issue?: true
    created_at?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: number
    query_id: number
    user_id: number
    rating: number | null
    comment: string | null
    resolved_issue: boolean | null
    created_at: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    query_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    resolved_issue?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    query_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    resolved_issue?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    query_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    resolved_issue?: boolean
    created_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    query_id?: boolean
    user_id?: boolean
    rating?: boolean
    comment?: boolean
    resolved_issue?: boolean
    created_at?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "query_id" | "user_id" | "rating" | "comment" | "resolved_issue" | "created_at", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    query?: boolean | QueryDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      query: Prisma.$QueryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      query_id: number
      user_id: number
      rating: number | null
      comment: string | null
      resolved_issue: boolean | null
      created_at: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    query<T extends QueryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QueryDefaultArgs<ExtArgs>>): Prisma__QueryClient<$Result.GetResult<Prisma.$QueryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'Int'>
    readonly query_id: FieldRef<"Feedback", 'Int'>
    readonly user_id: FieldRef<"Feedback", 'Int'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly resolved_issue: FieldRef<"Feedback", 'Boolean'>
    readonly created_at: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type TeacherSumAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: number | null
    department_id: number | null
    employee_name: string | null
    teachers_details: string | null
    office_location: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: number | null
    department_id: number | null
    employee_name: string | null
    teachers_details: string | null
    office_location: string | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    department_id: number
    employee_name: number
    teachers_details: number
    office_location: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type TeacherSumAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    department_id?: true
    employee_name?: true
    teachers_details?: true
    office_location?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    department_id?: true
    employee_name?: true
    teachers_details?: true
    office_location?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    department_id?: true
    employee_name?: true
    teachers_details?: true
    office_location?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: number
    department_id: number
    employee_name: string | null
    teachers_details: string | null
    office_location: string | null
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    employee_name?: boolean
    teachers_details?: boolean
    office_location?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    employee_name?: boolean
    teachers_details?: boolean
    office_location?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    employee_name?: boolean
    teachers_details?: boolean
    office_location?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    department_id?: boolean
    employee_name?: boolean
    teachers_details?: boolean
    office_location?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "department_id" | "employee_name" | "teachers_details" | "office_location", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      department_id: number
      employee_name: string | null
      teachers_details: string | null
      office_location: string | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'Int'>
    readonly department_id: FieldRef<"Teacher", 'Int'>
    readonly employee_name: FieldRef<"Teacher", 'String'>
    readonly teachers_details: FieldRef<"Teacher", 'String'>
    readonly office_location: FieldRef<"Teacher", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentAvgAggregateOutputType = {
    id: number | null
    tuition_fee: Decimal | null
  }

  export type DepartmentSumAggregateOutputType = {
    id: number | null
    tuition_fee: Decimal | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: number | null
    name: string | null
    tuition_fee: Decimal | null
    head_name: string | null
    description: string | null
    building: string | null
    floor: string | null
    career_path: string | null
    created_at: Date | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: number | null
    name: string | null
    tuition_fee: Decimal | null
    head_name: string | null
    description: string | null
    building: string | null
    floor: string | null
    career_path: string | null
    created_at: Date | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    tuition_fee: number
    head_name: number
    description: number
    building: number
    floor: number
    career_path: number
    created_at: number
    _all: number
  }


  export type DepartmentAvgAggregateInputType = {
    id?: true
    tuition_fee?: true
  }

  export type DepartmentSumAggregateInputType = {
    id?: true
    tuition_fee?: true
  }

  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    tuition_fee?: true
    head_name?: true
    description?: true
    building?: true
    floor?: true
    career_path?: true
    created_at?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    tuition_fee?: true
    head_name?: true
    description?: true
    building?: true
    floor?: true
    career_path?: true
    created_at?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    tuition_fee?: true
    head_name?: true
    description?: true
    building?: true
    floor?: true
    career_path?: true
    created_at?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _avg?: DepartmentAvgAggregateInputType
    _sum?: DepartmentSumAggregateInputType
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: number
    name: string | null
    tuition_fee: Decimal | null
    head_name: string | null
    description: string | null
    building: string | null
    floor: string | null
    career_path: string | null
    created_at: Date | null
    _count: DepartmentCountAggregateOutputType | null
    _avg: DepartmentAvgAggregateOutputType | null
    _sum: DepartmentSumAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tuition_fee?: boolean
    head_name?: boolean
    description?: boolean
    building?: boolean
    floor?: boolean
    career_path?: boolean
    created_at?: boolean
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    faqs?: boolean | Department$faqsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tuition_fee?: boolean
    head_name?: boolean
    description?: boolean
    building?: boolean
    floor?: boolean
    career_path?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    tuition_fee?: boolean
    head_name?: boolean
    description?: boolean
    building?: boolean
    floor?: boolean
    career_path?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    tuition_fee?: boolean
    head_name?: boolean
    description?: boolean
    building?: boolean
    floor?: boolean
    career_path?: boolean
    created_at?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "tuition_fee" | "head_name" | "description" | "building" | "floor" | "career_path" | "created_at", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | Department$teachersArgs<ExtArgs>
    courses?: boolean | Department$coursesArgs<ExtArgs>
    faqs?: boolean | Department$faqsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      teachers: Prisma.$TeacherPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
      faqs: Prisma.$FaqPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      tuition_fee: Prisma.Decimal | null
      head_name: string | null
      description: string | null
      building: string | null
      floor: string | null
      career_path: string | null
      created_at: Date | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teachers<T extends Department$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Department$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends Department$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Department$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    faqs<T extends Department$faqsArgs<ExtArgs> = {}>(args?: Subset<T, Department$faqsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'Int'>
    readonly name: FieldRef<"Department", 'String'>
    readonly tuition_fee: FieldRef<"Department", 'Decimal'>
    readonly head_name: FieldRef<"Department", 'String'>
    readonly description: FieldRef<"Department", 'String'>
    readonly building: FieldRef<"Department", 'String'>
    readonly floor: FieldRef<"Department", 'String'>
    readonly career_path: FieldRef<"Department", 'String'>
    readonly created_at: FieldRef<"Department", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data?: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.teachers
   */
  export type Department$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Department.courses
   */
  export type Department$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Department.faqs
   */
  export type Department$faqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    where?: FaqWhereInput
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    cursor?: FaqWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    department_id: number | null
    total_course: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    department_id: number | null
    total_course: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    department_id: number | null
    name: string | null
    total_course: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    department_id: number | null
    name: string | null
    total_course: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    department_id: number
    name: number
    total_course: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    department_id?: true
    total_course?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    department_id?: true
    total_course?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    department_id?: true
    name?: true
    total_course?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    department_id?: true
    name?: true
    total_course?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    department_id?: true
    name?: true
    total_course?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    department_id: number
    name: string | null
    total_course: number | null
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    name?: boolean
    total_course?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    name?: boolean
    total_course?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    name?: boolean
    total_course?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    department_id?: boolean
    name?: boolean
    total_course?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "department_id" | "name" | "total_course", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      department_id: number
      name: string | null
      total_course: number | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly department_id: FieldRef<"Course", 'Int'>
    readonly name: FieldRef<"Course", 'String'>
    readonly total_course: FieldRef<"Course", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Faq
   */

  export type AggregateFaq = {
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  export type FaqAvgAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type FaqSumAggregateOutputType = {
    id: number | null
    department_id: number | null
  }

  export type FaqMinAggregateOutputType = {
    id: number | null
    department_id: number | null
    question: string | null
    answer: string | null
    category: string | null
  }

  export type FaqMaxAggregateOutputType = {
    id: number | null
    department_id: number | null
    question: string | null
    answer: string | null
    category: string | null
  }

  export type FaqCountAggregateOutputType = {
    id: number
    department_id: number
    question: number
    answer: number
    category: number
    _all: number
  }


  export type FaqAvgAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type FaqSumAggregateInputType = {
    id?: true
    department_id?: true
  }

  export type FaqMinAggregateInputType = {
    id?: true
    department_id?: true
    question?: true
    answer?: true
    category?: true
  }

  export type FaqMaxAggregateInputType = {
    id?: true
    department_id?: true
    question?: true
    answer?: true
    category?: true
  }

  export type FaqCountAggregateInputType = {
    id?: true
    department_id?: true
    question?: true
    answer?: true
    category?: true
    _all?: true
  }

  export type FaqAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faq to aggregate.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Faqs
    **/
    _count?: true | FaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FaqMaxAggregateInputType
  }

  export type GetFaqAggregateType<T extends FaqAggregateArgs> = {
        [P in keyof T & keyof AggregateFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFaq[P]>
      : GetScalarType<T[P], AggregateFaq[P]>
  }




  export type FaqGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FaqWhereInput
    orderBy?: FaqOrderByWithAggregationInput | FaqOrderByWithAggregationInput[]
    by: FaqScalarFieldEnum[] | FaqScalarFieldEnum
    having?: FaqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FaqCountAggregateInputType | true
    _avg?: FaqAvgAggregateInputType
    _sum?: FaqSumAggregateInputType
    _min?: FaqMinAggregateInputType
    _max?: FaqMaxAggregateInputType
  }

  export type FaqGroupByOutputType = {
    id: number
    department_id: number
    question: string | null
    answer: string | null
    category: string | null
    _count: FaqCountAggregateOutputType | null
    _avg: FaqAvgAggregateOutputType | null
    _sum: FaqSumAggregateOutputType | null
    _min: FaqMinAggregateOutputType | null
    _max: FaqMaxAggregateOutputType | null
  }

  type GetFaqGroupByPayload<T extends FaqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FaqGroupByOutputType[P]>
            : GetScalarType<T[P], FaqGroupByOutputType[P]>
        }
      >
    >


  export type FaqSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    keywords?: boolean | Faq$keywordsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    department_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["faq"]>

  export type FaqSelectScalar = {
    id?: boolean
    department_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
  }

  export type FaqOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "department_id" | "question" | "answer" | "category", ExtArgs["result"]["faq"]>
  export type FaqInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    keywords?: boolean | Faq$keywordsArgs<ExtArgs>
    _count?: boolean | FaqCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FaqIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }
  export type FaqIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
  }

  export type $FaqPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Faq"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs>
      keywords: Prisma.$QuestionKeywordPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      department_id: number
      question: string | null
      answer: string | null
      category: string | null
    }, ExtArgs["result"]["faq"]>
    composites: {}
  }

  type FaqGetPayload<S extends boolean | null | undefined | FaqDefaultArgs> = $Result.GetResult<Prisma.$FaqPayload, S>

  type FaqCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FaqFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FaqCountAggregateInputType | true
    }

  export interface FaqDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Faq'], meta: { name: 'Faq' } }
    /**
     * Find zero or one Faq that matches the filter.
     * @param {FaqFindUniqueArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FaqFindUniqueArgs>(args: SelectSubset<T, FaqFindUniqueArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Faq that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FaqFindUniqueOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FaqFindUniqueOrThrowArgs>(args: SelectSubset<T, FaqFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FaqFindFirstArgs>(args?: SelectSubset<T, FaqFindFirstArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Faq that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindFirstOrThrowArgs} args - Arguments to find a Faq
     * @example
     * // Get one Faq
     * const faq = await prisma.faq.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FaqFindFirstOrThrowArgs>(args?: SelectSubset<T, FaqFindFirstOrThrowArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Faqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Faqs
     * const faqs = await prisma.faq.findMany()
     * 
     * // Get first 10 Faqs
     * const faqs = await prisma.faq.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const faqWithIdOnly = await prisma.faq.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FaqFindManyArgs>(args?: SelectSubset<T, FaqFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Faq.
     * @param {FaqCreateArgs} args - Arguments to create a Faq.
     * @example
     * // Create one Faq
     * const Faq = await prisma.faq.create({
     *   data: {
     *     // ... data to create a Faq
     *   }
     * })
     * 
     */
    create<T extends FaqCreateArgs>(args: SelectSubset<T, FaqCreateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Faqs.
     * @param {FaqCreateManyArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FaqCreateManyArgs>(args?: SelectSubset<T, FaqCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Faqs and returns the data saved in the database.
     * @param {FaqCreateManyAndReturnArgs} args - Arguments to create many Faqs.
     * @example
     * // Create many Faqs
     * const faq = await prisma.faq.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Faqs and only return the `id`
     * const faqWithIdOnly = await prisma.faq.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FaqCreateManyAndReturnArgs>(args?: SelectSubset<T, FaqCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Faq.
     * @param {FaqDeleteArgs} args - Arguments to delete one Faq.
     * @example
     * // Delete one Faq
     * const Faq = await prisma.faq.delete({
     *   where: {
     *     // ... filter to delete one Faq
     *   }
     * })
     * 
     */
    delete<T extends FaqDeleteArgs>(args: SelectSubset<T, FaqDeleteArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Faq.
     * @param {FaqUpdateArgs} args - Arguments to update one Faq.
     * @example
     * // Update one Faq
     * const faq = await prisma.faq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FaqUpdateArgs>(args: SelectSubset<T, FaqUpdateArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Faqs.
     * @param {FaqDeleteManyArgs} args - Arguments to filter Faqs to delete.
     * @example
     * // Delete a few Faqs
     * const { count } = await prisma.faq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FaqDeleteManyArgs>(args?: SelectSubset<T, FaqDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FaqUpdateManyArgs>(args: SelectSubset<T, FaqUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Faqs and returns the data updated in the database.
     * @param {FaqUpdateManyAndReturnArgs} args - Arguments to update many Faqs.
     * @example
     * // Update many Faqs
     * const faq = await prisma.faq.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Faqs and only return the `id`
     * const faqWithIdOnly = await prisma.faq.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FaqUpdateManyAndReturnArgs>(args: SelectSubset<T, FaqUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Faq.
     * @param {FaqUpsertArgs} args - Arguments to update or create a Faq.
     * @example
     * // Update or create a Faq
     * const faq = await prisma.faq.upsert({
     *   create: {
     *     // ... data to create a Faq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Faq we want to update
     *   }
     * })
     */
    upsert<T extends FaqUpsertArgs>(args: SelectSubset<T, FaqUpsertArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Faqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqCountArgs} args - Arguments to filter Faqs to count.
     * @example
     * // Count the number of Faqs
     * const count = await prisma.faq.count({
     *   where: {
     *     // ... the filter for the Faqs we want to count
     *   }
     * })
    **/
    count<T extends FaqCountArgs>(
      args?: Subset<T, FaqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FaqAggregateArgs>(args: Subset<T, FaqAggregateArgs>): Prisma.PrismaPromise<GetFaqAggregateType<T>>

    /**
     * Group by Faq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FaqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FaqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FaqGroupByArgs['orderBy'] }
        : { orderBy?: FaqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FaqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Faq model
   */
  readonly fields: FaqFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Faq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FaqClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    keywords<T extends Faq$keywordsArgs<ExtArgs> = {}>(args?: Subset<T, Faq$keywordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Faq model
   */
  interface FaqFieldRefs {
    readonly id: FieldRef<"Faq", 'Int'>
    readonly department_id: FieldRef<"Faq", 'Int'>
    readonly question: FieldRef<"Faq", 'String'>
    readonly answer: FieldRef<"Faq", 'String'>
    readonly category: FieldRef<"Faq", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Faq findUnique
   */
  export type FaqFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findUniqueOrThrow
   */
  export type FaqFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq findFirst
   */
  export type FaqFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findFirstOrThrow
   */
  export type FaqFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faq to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Faqs.
     */
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq findMany
   */
  export type FaqFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter, which Faqs to fetch.
     */
    where?: FaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Faqs to fetch.
     */
    orderBy?: FaqOrderByWithRelationInput | FaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Faqs.
     */
    cursor?: FaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Faqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Faqs.
     */
    skip?: number
    distinct?: FaqScalarFieldEnum | FaqScalarFieldEnum[]
  }

  /**
   * Faq create
   */
  export type FaqCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to create a Faq.
     */
    data: XOR<FaqCreateInput, FaqUncheckedCreateInput>
  }

  /**
   * Faq createMany
   */
  export type FaqCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Faqs.
     */
    data: FaqCreateManyInput | FaqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Faq createManyAndReturn
   */
  export type FaqCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * The data used to create many Faqs.
     */
    data: FaqCreateManyInput | FaqCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Faq update
   */
  export type FaqUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The data needed to update a Faq.
     */
    data: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
    /**
     * Choose, which Faq to update.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq updateMany
   */
  export type FaqUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Faqs.
     */
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyInput>
    /**
     * Filter which Faqs to update
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to update.
     */
    limit?: number
  }

  /**
   * Faq updateManyAndReturn
   */
  export type FaqUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * The data used to update Faqs.
     */
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyInput>
    /**
     * Filter which Faqs to update
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Faq upsert
   */
  export type FaqUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * The filter to search for the Faq to update in case it exists.
     */
    where: FaqWhereUniqueInput
    /**
     * In case the Faq found by the `where` argument doesn't exist, create a new Faq with this data.
     */
    create: XOR<FaqCreateInput, FaqUncheckedCreateInput>
    /**
     * In case the Faq was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FaqUpdateInput, FaqUncheckedUpdateInput>
  }

  /**
   * Faq delete
   */
  export type FaqDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
    /**
     * Filter which Faq to delete.
     */
    where: FaqWhereUniqueInput
  }

  /**
   * Faq deleteMany
   */
  export type FaqDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Faqs to delete
     */
    where?: FaqWhereInput
    /**
     * Limit how many Faqs to delete.
     */
    limit?: number
  }

  /**
   * Faq.keywords
   */
  export type Faq$keywordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    where?: QuestionKeywordWhereInput
    orderBy?: QuestionKeywordOrderByWithRelationInput | QuestionKeywordOrderByWithRelationInput[]
    cursor?: QuestionKeywordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionKeywordScalarFieldEnum | QuestionKeywordScalarFieldEnum[]
  }

  /**
   * Faq without action
   */
  export type FaqDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Faq
     */
    select?: FaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Faq
     */
    omit?: FaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FaqInclude<ExtArgs> | null
  }


  /**
   * Model QuestionKeyword
   */

  export type AggregateQuestionKeyword = {
    _count: QuestionKeywordCountAggregateOutputType | null
    _avg: QuestionKeywordAvgAggregateOutputType | null
    _sum: QuestionKeywordSumAggregateOutputType | null
    _min: QuestionKeywordMinAggregateOutputType | null
    _max: QuestionKeywordMaxAggregateOutputType | null
  }

  export type QuestionKeywordAvgAggregateOutputType = {
    id: number | null
    faq_id: number | null
  }

  export type QuestionKeywordSumAggregateOutputType = {
    id: number | null
    faq_id: number | null
  }

  export type QuestionKeywordMinAggregateOutputType = {
    id: number | null
    faq_id: number | null
    keyword: string | null
    created_at: Date | null
  }

  export type QuestionKeywordMaxAggregateOutputType = {
    id: number | null
    faq_id: number | null
    keyword: string | null
    created_at: Date | null
  }

  export type QuestionKeywordCountAggregateOutputType = {
    id: number
    faq_id: number
    keyword: number
    created_at: number
    _all: number
  }


  export type QuestionKeywordAvgAggregateInputType = {
    id?: true
    faq_id?: true
  }

  export type QuestionKeywordSumAggregateInputType = {
    id?: true
    faq_id?: true
  }

  export type QuestionKeywordMinAggregateInputType = {
    id?: true
    faq_id?: true
    keyword?: true
    created_at?: true
  }

  export type QuestionKeywordMaxAggregateInputType = {
    id?: true
    faq_id?: true
    keyword?: true
    created_at?: true
  }

  export type QuestionKeywordCountAggregateInputType = {
    id?: true
    faq_id?: true
    keyword?: true
    created_at?: true
    _all?: true
  }

  export type QuestionKeywordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionKeyword to aggregate.
     */
    where?: QuestionKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionKeywords to fetch.
     */
    orderBy?: QuestionKeywordOrderByWithRelationInput | QuestionKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuestionKeywords
    **/
    _count?: true | QuestionKeywordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionKeywordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionKeywordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionKeywordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionKeywordMaxAggregateInputType
  }

  export type GetQuestionKeywordAggregateType<T extends QuestionKeywordAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestionKeyword]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestionKeyword[P]>
      : GetScalarType<T[P], AggregateQuestionKeyword[P]>
  }




  export type QuestionKeywordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionKeywordWhereInput
    orderBy?: QuestionKeywordOrderByWithAggregationInput | QuestionKeywordOrderByWithAggregationInput[]
    by: QuestionKeywordScalarFieldEnum[] | QuestionKeywordScalarFieldEnum
    having?: QuestionKeywordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionKeywordCountAggregateInputType | true
    _avg?: QuestionKeywordAvgAggregateInputType
    _sum?: QuestionKeywordSumAggregateInputType
    _min?: QuestionKeywordMinAggregateInputType
    _max?: QuestionKeywordMaxAggregateInputType
  }

  export type QuestionKeywordGroupByOutputType = {
    id: number
    faq_id: number
    keyword: string | null
    created_at: Date | null
    _count: QuestionKeywordCountAggregateOutputType | null
    _avg: QuestionKeywordAvgAggregateOutputType | null
    _sum: QuestionKeywordSumAggregateOutputType | null
    _min: QuestionKeywordMinAggregateOutputType | null
    _max: QuestionKeywordMaxAggregateOutputType | null
  }

  type GetQuestionKeywordGroupByPayload<T extends QuestionKeywordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionKeywordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionKeywordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionKeywordGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionKeywordGroupByOutputType[P]>
        }
      >
    >


  export type QuestionKeywordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    keyword?: boolean
    created_at?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionKeyword"]>

  export type QuestionKeywordSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    keyword?: boolean
    created_at?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionKeyword"]>

  export type QuestionKeywordSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    faq_id?: boolean
    keyword?: boolean
    created_at?: boolean
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["questionKeyword"]>

  export type QuestionKeywordSelectScalar = {
    id?: boolean
    faq_id?: boolean
    keyword?: boolean
    created_at?: boolean
  }

  export type QuestionKeywordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "faq_id" | "keyword" | "created_at", ExtArgs["result"]["questionKeyword"]>
  export type QuestionKeywordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }
  export type QuestionKeywordIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }
  export type QuestionKeywordIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    faq?: boolean | FaqDefaultArgs<ExtArgs>
  }

  export type $QuestionKeywordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QuestionKeyword"
    objects: {
      faq: Prisma.$FaqPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      faq_id: number
      keyword: string | null
      created_at: Date | null
    }, ExtArgs["result"]["questionKeyword"]>
    composites: {}
  }

  type QuestionKeywordGetPayload<S extends boolean | null | undefined | QuestionKeywordDefaultArgs> = $Result.GetResult<Prisma.$QuestionKeywordPayload, S>

  type QuestionKeywordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<QuestionKeywordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: QuestionKeywordCountAggregateInputType | true
    }

  export interface QuestionKeywordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QuestionKeyword'], meta: { name: 'QuestionKeyword' } }
    /**
     * Find zero or one QuestionKeyword that matches the filter.
     * @param {QuestionKeywordFindUniqueArgs} args - Arguments to find a QuestionKeyword
     * @example
     * // Get one QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionKeywordFindUniqueArgs>(args: SelectSubset<T, QuestionKeywordFindUniqueArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one QuestionKeyword that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {QuestionKeywordFindUniqueOrThrowArgs} args - Arguments to find a QuestionKeyword
     * @example
     * // Get one QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionKeywordFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionKeywordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionKeyword that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordFindFirstArgs} args - Arguments to find a QuestionKeyword
     * @example
     * // Get one QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionKeywordFindFirstArgs>(args?: SelectSubset<T, QuestionKeywordFindFirstArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first QuestionKeyword that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordFindFirstOrThrowArgs} args - Arguments to find a QuestionKeyword
     * @example
     * // Get one QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionKeywordFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionKeywordFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more QuestionKeywords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuestionKeywords
     * const questionKeywords = await prisma.questionKeyword.findMany()
     * 
     * // Get first 10 QuestionKeywords
     * const questionKeywords = await prisma.questionKeyword.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionKeywordWithIdOnly = await prisma.questionKeyword.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionKeywordFindManyArgs>(args?: SelectSubset<T, QuestionKeywordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a QuestionKeyword.
     * @param {QuestionKeywordCreateArgs} args - Arguments to create a QuestionKeyword.
     * @example
     * // Create one QuestionKeyword
     * const QuestionKeyword = await prisma.questionKeyword.create({
     *   data: {
     *     // ... data to create a QuestionKeyword
     *   }
     * })
     * 
     */
    create<T extends QuestionKeywordCreateArgs>(args: SelectSubset<T, QuestionKeywordCreateArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many QuestionKeywords.
     * @param {QuestionKeywordCreateManyArgs} args - Arguments to create many QuestionKeywords.
     * @example
     * // Create many QuestionKeywords
     * const questionKeyword = await prisma.questionKeyword.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionKeywordCreateManyArgs>(args?: SelectSubset<T, QuestionKeywordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QuestionKeywords and returns the data saved in the database.
     * @param {QuestionKeywordCreateManyAndReturnArgs} args - Arguments to create many QuestionKeywords.
     * @example
     * // Create many QuestionKeywords
     * const questionKeyword = await prisma.questionKeyword.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QuestionKeywords and only return the `id`
     * const questionKeywordWithIdOnly = await prisma.questionKeyword.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionKeywordCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionKeywordCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a QuestionKeyword.
     * @param {QuestionKeywordDeleteArgs} args - Arguments to delete one QuestionKeyword.
     * @example
     * // Delete one QuestionKeyword
     * const QuestionKeyword = await prisma.questionKeyword.delete({
     *   where: {
     *     // ... filter to delete one QuestionKeyword
     *   }
     * })
     * 
     */
    delete<T extends QuestionKeywordDeleteArgs>(args: SelectSubset<T, QuestionKeywordDeleteArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one QuestionKeyword.
     * @param {QuestionKeywordUpdateArgs} args - Arguments to update one QuestionKeyword.
     * @example
     * // Update one QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionKeywordUpdateArgs>(args: SelectSubset<T, QuestionKeywordUpdateArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more QuestionKeywords.
     * @param {QuestionKeywordDeleteManyArgs} args - Arguments to filter QuestionKeywords to delete.
     * @example
     * // Delete a few QuestionKeywords
     * const { count } = await prisma.questionKeyword.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionKeywordDeleteManyArgs>(args?: SelectSubset<T, QuestionKeywordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionKeywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuestionKeywords
     * const questionKeyword = await prisma.questionKeyword.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionKeywordUpdateManyArgs>(args: SelectSubset<T, QuestionKeywordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QuestionKeywords and returns the data updated in the database.
     * @param {QuestionKeywordUpdateManyAndReturnArgs} args - Arguments to update many QuestionKeywords.
     * @example
     * // Update many QuestionKeywords
     * const questionKeyword = await prisma.questionKeyword.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more QuestionKeywords and only return the `id`
     * const questionKeywordWithIdOnly = await prisma.questionKeyword.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends QuestionKeywordUpdateManyAndReturnArgs>(args: SelectSubset<T, QuestionKeywordUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one QuestionKeyword.
     * @param {QuestionKeywordUpsertArgs} args - Arguments to update or create a QuestionKeyword.
     * @example
     * // Update or create a QuestionKeyword
     * const questionKeyword = await prisma.questionKeyword.upsert({
     *   create: {
     *     // ... data to create a QuestionKeyword
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuestionKeyword we want to update
     *   }
     * })
     */
    upsert<T extends QuestionKeywordUpsertArgs>(args: SelectSubset<T, QuestionKeywordUpsertArgs<ExtArgs>>): Prisma__QuestionKeywordClient<$Result.GetResult<Prisma.$QuestionKeywordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of QuestionKeywords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordCountArgs} args - Arguments to filter QuestionKeywords to count.
     * @example
     * // Count the number of QuestionKeywords
     * const count = await prisma.questionKeyword.count({
     *   where: {
     *     // ... the filter for the QuestionKeywords we want to count
     *   }
     * })
    **/
    count<T extends QuestionKeywordCountArgs>(
      args?: Subset<T, QuestionKeywordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionKeywordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuestionKeyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionKeywordAggregateArgs>(args: Subset<T, QuestionKeywordAggregateArgs>): Prisma.PrismaPromise<GetQuestionKeywordAggregateType<T>>

    /**
     * Group by QuestionKeyword.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionKeywordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionKeywordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionKeywordGroupByArgs['orderBy'] }
        : { orderBy?: QuestionKeywordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionKeywordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionKeywordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QuestionKeyword model
   */
  readonly fields: QuestionKeywordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QuestionKeyword.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionKeywordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    faq<T extends FaqDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FaqDefaultArgs<ExtArgs>>): Prisma__FaqClient<$Result.GetResult<Prisma.$FaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QuestionKeyword model
   */
  interface QuestionKeywordFieldRefs {
    readonly id: FieldRef<"QuestionKeyword", 'Int'>
    readonly faq_id: FieldRef<"QuestionKeyword", 'Int'>
    readonly keyword: FieldRef<"QuestionKeyword", 'String'>
    readonly created_at: FieldRef<"QuestionKeyword", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QuestionKeyword findUnique
   */
  export type QuestionKeywordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter, which QuestionKeyword to fetch.
     */
    where: QuestionKeywordWhereUniqueInput
  }

  /**
   * QuestionKeyword findUniqueOrThrow
   */
  export type QuestionKeywordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter, which QuestionKeyword to fetch.
     */
    where: QuestionKeywordWhereUniqueInput
  }

  /**
   * QuestionKeyword findFirst
   */
  export type QuestionKeywordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter, which QuestionKeyword to fetch.
     */
    where?: QuestionKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionKeywords to fetch.
     */
    orderBy?: QuestionKeywordOrderByWithRelationInput | QuestionKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionKeywords.
     */
    cursor?: QuestionKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionKeywords.
     */
    distinct?: QuestionKeywordScalarFieldEnum | QuestionKeywordScalarFieldEnum[]
  }

  /**
   * QuestionKeyword findFirstOrThrow
   */
  export type QuestionKeywordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter, which QuestionKeyword to fetch.
     */
    where?: QuestionKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionKeywords to fetch.
     */
    orderBy?: QuestionKeywordOrderByWithRelationInput | QuestionKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuestionKeywords.
     */
    cursor?: QuestionKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionKeywords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QuestionKeywords.
     */
    distinct?: QuestionKeywordScalarFieldEnum | QuestionKeywordScalarFieldEnum[]
  }

  /**
   * QuestionKeyword findMany
   */
  export type QuestionKeywordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter, which QuestionKeywords to fetch.
     */
    where?: QuestionKeywordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QuestionKeywords to fetch.
     */
    orderBy?: QuestionKeywordOrderByWithRelationInput | QuestionKeywordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuestionKeywords.
     */
    cursor?: QuestionKeywordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuestionKeywords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuestionKeywords.
     */
    skip?: number
    distinct?: QuestionKeywordScalarFieldEnum | QuestionKeywordScalarFieldEnum[]
  }

  /**
   * QuestionKeyword create
   */
  export type QuestionKeywordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * The data needed to create a QuestionKeyword.
     */
    data: XOR<QuestionKeywordCreateInput, QuestionKeywordUncheckedCreateInput>
  }

  /**
   * QuestionKeyword createMany
   */
  export type QuestionKeywordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QuestionKeywords.
     */
    data: QuestionKeywordCreateManyInput | QuestionKeywordCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QuestionKeyword createManyAndReturn
   */
  export type QuestionKeywordCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * The data used to create many QuestionKeywords.
     */
    data: QuestionKeywordCreateManyInput | QuestionKeywordCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionKeyword update
   */
  export type QuestionKeywordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * The data needed to update a QuestionKeyword.
     */
    data: XOR<QuestionKeywordUpdateInput, QuestionKeywordUncheckedUpdateInput>
    /**
     * Choose, which QuestionKeyword to update.
     */
    where: QuestionKeywordWhereUniqueInput
  }

  /**
   * QuestionKeyword updateMany
   */
  export type QuestionKeywordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QuestionKeywords.
     */
    data: XOR<QuestionKeywordUpdateManyMutationInput, QuestionKeywordUncheckedUpdateManyInput>
    /**
     * Filter which QuestionKeywords to update
     */
    where?: QuestionKeywordWhereInput
    /**
     * Limit how many QuestionKeywords to update.
     */
    limit?: number
  }

  /**
   * QuestionKeyword updateManyAndReturn
   */
  export type QuestionKeywordUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * The data used to update QuestionKeywords.
     */
    data: XOR<QuestionKeywordUpdateManyMutationInput, QuestionKeywordUncheckedUpdateManyInput>
    /**
     * Filter which QuestionKeywords to update
     */
    where?: QuestionKeywordWhereInput
    /**
     * Limit how many QuestionKeywords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * QuestionKeyword upsert
   */
  export type QuestionKeywordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * The filter to search for the QuestionKeyword to update in case it exists.
     */
    where: QuestionKeywordWhereUniqueInput
    /**
     * In case the QuestionKeyword found by the `where` argument doesn't exist, create a new QuestionKeyword with this data.
     */
    create: XOR<QuestionKeywordCreateInput, QuestionKeywordUncheckedCreateInput>
    /**
     * In case the QuestionKeyword was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionKeywordUpdateInput, QuestionKeywordUncheckedUpdateInput>
  }

  /**
   * QuestionKeyword delete
   */
  export type QuestionKeywordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
    /**
     * Filter which QuestionKeyword to delete.
     */
    where: QuestionKeywordWhereUniqueInput
  }

  /**
   * QuestionKeyword deleteMany
   */
  export type QuestionKeywordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QuestionKeywords to delete
     */
    where?: QuestionKeywordWhereInput
    /**
     * Limit how many QuestionKeywords to delete.
     */
    limit?: number
  }

  /**
   * QuestionKeyword without action
   */
  export type QuestionKeywordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionKeyword
     */
    select?: QuestionKeywordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the QuestionKeyword
     */
    omit?: QuestionKeywordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionKeywordInclude<ExtArgs> | null
  }


  /**
   * Model Greeting
   */

  export type AggregateGreeting = {
    _count: GreetingCountAggregateOutputType | null
    _avg: GreetingAvgAggregateOutputType | null
    _sum: GreetingSumAggregateOutputType | null
    _min: GreetingMinAggregateOutputType | null
    _max: GreetingMaxAggregateOutputType | null
  }

  export type GreetingAvgAggregateOutputType = {
    id: number | null
  }

  export type GreetingSumAggregateOutputType = {
    id: number | null
  }

  export type GreetingMinAggregateOutputType = {
    id: number | null
    message: string | null
  }

  export type GreetingMaxAggregateOutputType = {
    id: number | null
    message: string | null
  }

  export type GreetingCountAggregateOutputType = {
    id: number
    message: number
    _all: number
  }


  export type GreetingAvgAggregateInputType = {
    id?: true
  }

  export type GreetingSumAggregateInputType = {
    id?: true
  }

  export type GreetingMinAggregateInputType = {
    id?: true
    message?: true
  }

  export type GreetingMaxAggregateInputType = {
    id?: true
    message?: true
  }

  export type GreetingCountAggregateInputType = {
    id?: true
    message?: true
    _all?: true
  }

  export type GreetingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Greeting to aggregate.
     */
    where?: GreetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greetings to fetch.
     */
    orderBy?: GreetingOrderByWithRelationInput | GreetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GreetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Greetings
    **/
    _count?: true | GreetingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GreetingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GreetingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GreetingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GreetingMaxAggregateInputType
  }

  export type GetGreetingAggregateType<T extends GreetingAggregateArgs> = {
        [P in keyof T & keyof AggregateGreeting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGreeting[P]>
      : GetScalarType<T[P], AggregateGreeting[P]>
  }




  export type GreetingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GreetingWhereInput
    orderBy?: GreetingOrderByWithAggregationInput | GreetingOrderByWithAggregationInput[]
    by: GreetingScalarFieldEnum[] | GreetingScalarFieldEnum
    having?: GreetingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GreetingCountAggregateInputType | true
    _avg?: GreetingAvgAggregateInputType
    _sum?: GreetingSumAggregateInputType
    _min?: GreetingMinAggregateInputType
    _max?: GreetingMaxAggregateInputType
  }

  export type GreetingGroupByOutputType = {
    id: number
    message: string | null
    _count: GreetingCountAggregateOutputType | null
    _avg: GreetingAvgAggregateOutputType | null
    _sum: GreetingSumAggregateOutputType | null
    _min: GreetingMinAggregateOutputType | null
    _max: GreetingMaxAggregateOutputType | null
  }

  type GetGreetingGroupByPayload<T extends GreetingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GreetingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GreetingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GreetingGroupByOutputType[P]>
            : GetScalarType<T[P], GreetingGroupByOutputType[P]>
        }
      >
    >


  export type GreetingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
  }, ExtArgs["result"]["greeting"]>

  export type GreetingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
  }, ExtArgs["result"]["greeting"]>

  export type GreetingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
  }, ExtArgs["result"]["greeting"]>

  export type GreetingSelectScalar = {
    id?: boolean
    message?: boolean
  }

  export type GreetingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "message", ExtArgs["result"]["greeting"]>

  export type $GreetingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Greeting"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      message: string | null
    }, ExtArgs["result"]["greeting"]>
    composites: {}
  }

  type GreetingGetPayload<S extends boolean | null | undefined | GreetingDefaultArgs> = $Result.GetResult<Prisma.$GreetingPayload, S>

  type GreetingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GreetingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GreetingCountAggregateInputType | true
    }

  export interface GreetingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Greeting'], meta: { name: 'Greeting' } }
    /**
     * Find zero or one Greeting that matches the filter.
     * @param {GreetingFindUniqueArgs} args - Arguments to find a Greeting
     * @example
     * // Get one Greeting
     * const greeting = await prisma.greeting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GreetingFindUniqueArgs>(args: SelectSubset<T, GreetingFindUniqueArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Greeting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GreetingFindUniqueOrThrowArgs} args - Arguments to find a Greeting
     * @example
     * // Get one Greeting
     * const greeting = await prisma.greeting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GreetingFindUniqueOrThrowArgs>(args: SelectSubset<T, GreetingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Greeting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingFindFirstArgs} args - Arguments to find a Greeting
     * @example
     * // Get one Greeting
     * const greeting = await prisma.greeting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GreetingFindFirstArgs>(args?: SelectSubset<T, GreetingFindFirstArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Greeting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingFindFirstOrThrowArgs} args - Arguments to find a Greeting
     * @example
     * // Get one Greeting
     * const greeting = await prisma.greeting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GreetingFindFirstOrThrowArgs>(args?: SelectSubset<T, GreetingFindFirstOrThrowArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Greetings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Greetings
     * const greetings = await prisma.greeting.findMany()
     * 
     * // Get first 10 Greetings
     * const greetings = await prisma.greeting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const greetingWithIdOnly = await prisma.greeting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GreetingFindManyArgs>(args?: SelectSubset<T, GreetingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Greeting.
     * @param {GreetingCreateArgs} args - Arguments to create a Greeting.
     * @example
     * // Create one Greeting
     * const Greeting = await prisma.greeting.create({
     *   data: {
     *     // ... data to create a Greeting
     *   }
     * })
     * 
     */
    create<T extends GreetingCreateArgs>(args: SelectSubset<T, GreetingCreateArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Greetings.
     * @param {GreetingCreateManyArgs} args - Arguments to create many Greetings.
     * @example
     * // Create many Greetings
     * const greeting = await prisma.greeting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GreetingCreateManyArgs>(args?: SelectSubset<T, GreetingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Greetings and returns the data saved in the database.
     * @param {GreetingCreateManyAndReturnArgs} args - Arguments to create many Greetings.
     * @example
     * // Create many Greetings
     * const greeting = await prisma.greeting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Greetings and only return the `id`
     * const greetingWithIdOnly = await prisma.greeting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GreetingCreateManyAndReturnArgs>(args?: SelectSubset<T, GreetingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Greeting.
     * @param {GreetingDeleteArgs} args - Arguments to delete one Greeting.
     * @example
     * // Delete one Greeting
     * const Greeting = await prisma.greeting.delete({
     *   where: {
     *     // ... filter to delete one Greeting
     *   }
     * })
     * 
     */
    delete<T extends GreetingDeleteArgs>(args: SelectSubset<T, GreetingDeleteArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Greeting.
     * @param {GreetingUpdateArgs} args - Arguments to update one Greeting.
     * @example
     * // Update one Greeting
     * const greeting = await prisma.greeting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GreetingUpdateArgs>(args: SelectSubset<T, GreetingUpdateArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Greetings.
     * @param {GreetingDeleteManyArgs} args - Arguments to filter Greetings to delete.
     * @example
     * // Delete a few Greetings
     * const { count } = await prisma.greeting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GreetingDeleteManyArgs>(args?: SelectSubset<T, GreetingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Greetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Greetings
     * const greeting = await prisma.greeting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GreetingUpdateManyArgs>(args: SelectSubset<T, GreetingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Greetings and returns the data updated in the database.
     * @param {GreetingUpdateManyAndReturnArgs} args - Arguments to update many Greetings.
     * @example
     * // Update many Greetings
     * const greeting = await prisma.greeting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Greetings and only return the `id`
     * const greetingWithIdOnly = await prisma.greeting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GreetingUpdateManyAndReturnArgs>(args: SelectSubset<T, GreetingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Greeting.
     * @param {GreetingUpsertArgs} args - Arguments to update or create a Greeting.
     * @example
     * // Update or create a Greeting
     * const greeting = await prisma.greeting.upsert({
     *   create: {
     *     // ... data to create a Greeting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Greeting we want to update
     *   }
     * })
     */
    upsert<T extends GreetingUpsertArgs>(args: SelectSubset<T, GreetingUpsertArgs<ExtArgs>>): Prisma__GreetingClient<$Result.GetResult<Prisma.$GreetingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Greetings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingCountArgs} args - Arguments to filter Greetings to count.
     * @example
     * // Count the number of Greetings
     * const count = await prisma.greeting.count({
     *   where: {
     *     // ... the filter for the Greetings we want to count
     *   }
     * })
    **/
    count<T extends GreetingCountArgs>(
      args?: Subset<T, GreetingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GreetingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Greeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GreetingAggregateArgs>(args: Subset<T, GreetingAggregateArgs>): Prisma.PrismaPromise<GetGreetingAggregateType<T>>

    /**
     * Group by Greeting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GreetingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GreetingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GreetingGroupByArgs['orderBy'] }
        : { orderBy?: GreetingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GreetingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGreetingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Greeting model
   */
  readonly fields: GreetingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Greeting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GreetingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Greeting model
   */
  interface GreetingFieldRefs {
    readonly id: FieldRef<"Greeting", 'Int'>
    readonly message: FieldRef<"Greeting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Greeting findUnique
   */
  export type GreetingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter, which Greeting to fetch.
     */
    where: GreetingWhereUniqueInput
  }

  /**
   * Greeting findUniqueOrThrow
   */
  export type GreetingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter, which Greeting to fetch.
     */
    where: GreetingWhereUniqueInput
  }

  /**
   * Greeting findFirst
   */
  export type GreetingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter, which Greeting to fetch.
     */
    where?: GreetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greetings to fetch.
     */
    orderBy?: GreetingOrderByWithRelationInput | GreetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Greetings.
     */
    cursor?: GreetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Greetings.
     */
    distinct?: GreetingScalarFieldEnum | GreetingScalarFieldEnum[]
  }

  /**
   * Greeting findFirstOrThrow
   */
  export type GreetingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter, which Greeting to fetch.
     */
    where?: GreetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greetings to fetch.
     */
    orderBy?: GreetingOrderByWithRelationInput | GreetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Greetings.
     */
    cursor?: GreetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greetings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Greetings.
     */
    distinct?: GreetingScalarFieldEnum | GreetingScalarFieldEnum[]
  }

  /**
   * Greeting findMany
   */
  export type GreetingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter, which Greetings to fetch.
     */
    where?: GreetingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Greetings to fetch.
     */
    orderBy?: GreetingOrderByWithRelationInput | GreetingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Greetings.
     */
    cursor?: GreetingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Greetings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Greetings.
     */
    skip?: number
    distinct?: GreetingScalarFieldEnum | GreetingScalarFieldEnum[]
  }

  /**
   * Greeting create
   */
  export type GreetingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * The data needed to create a Greeting.
     */
    data?: XOR<GreetingCreateInput, GreetingUncheckedCreateInput>
  }

  /**
   * Greeting createMany
   */
  export type GreetingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Greetings.
     */
    data: GreetingCreateManyInput | GreetingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Greeting createManyAndReturn
   */
  export type GreetingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * The data used to create many Greetings.
     */
    data: GreetingCreateManyInput | GreetingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Greeting update
   */
  export type GreetingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * The data needed to update a Greeting.
     */
    data: XOR<GreetingUpdateInput, GreetingUncheckedUpdateInput>
    /**
     * Choose, which Greeting to update.
     */
    where: GreetingWhereUniqueInput
  }

  /**
   * Greeting updateMany
   */
  export type GreetingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Greetings.
     */
    data: XOR<GreetingUpdateManyMutationInput, GreetingUncheckedUpdateManyInput>
    /**
     * Filter which Greetings to update
     */
    where?: GreetingWhereInput
    /**
     * Limit how many Greetings to update.
     */
    limit?: number
  }

  /**
   * Greeting updateManyAndReturn
   */
  export type GreetingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * The data used to update Greetings.
     */
    data: XOR<GreetingUpdateManyMutationInput, GreetingUncheckedUpdateManyInput>
    /**
     * Filter which Greetings to update
     */
    where?: GreetingWhereInput
    /**
     * Limit how many Greetings to update.
     */
    limit?: number
  }

  /**
   * Greeting upsert
   */
  export type GreetingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * The filter to search for the Greeting to update in case it exists.
     */
    where: GreetingWhereUniqueInput
    /**
     * In case the Greeting found by the `where` argument doesn't exist, create a new Greeting with this data.
     */
    create: XOR<GreetingCreateInput, GreetingUncheckedCreateInput>
    /**
     * In case the Greeting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GreetingUpdateInput, GreetingUncheckedUpdateInput>
  }

  /**
   * Greeting delete
   */
  export type GreetingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
    /**
     * Filter which Greeting to delete.
     */
    where: GreetingWhereUniqueInput
  }

  /**
   * Greeting deleteMany
   */
  export type GreetingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Greetings to delete
     */
    where?: GreetingWhereInput
    /**
     * Limit how many Greetings to delete.
     */
    limit?: number
  }

  /**
   * Greeting without action
   */
  export type GreetingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Greeting
     */
    select?: GreetingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Greeting
     */
    omit?: GreetingOmit<ExtArgs> | null
  }


  /**
   * Model SchoolDetail
   */

  export type AggregateSchoolDetail = {
    _count: SchoolDetailCountAggregateOutputType | null
    _avg: SchoolDetailAvgAggregateOutputType | null
    _sum: SchoolDetailSumAggregateOutputType | null
    _min: SchoolDetailMinAggregateOutputType | null
    _max: SchoolDetailMaxAggregateOutputType | null
  }

  export type SchoolDetailAvgAggregateOutputType = {
    id: number | null
    year_built: number | null
  }

  export type SchoolDetailSumAggregateOutputType = {
    id: number | null
    year_built: number | null
  }

  export type SchoolDetailMinAggregateOutputType = {
    id: number | null
    name: string | null
    small_details: string | null
    year_built: number | null
    history: string | null
    vision: string | null
    mission: string | null
    address: string | null
    accreditation: string | null
  }

  export type SchoolDetailMaxAggregateOutputType = {
    id: number | null
    name: string | null
    small_details: string | null
    year_built: number | null
    history: string | null
    vision: string | null
    mission: string | null
    address: string | null
    accreditation: string | null
  }

  export type SchoolDetailCountAggregateOutputType = {
    id: number
    name: number
    small_details: number
    year_built: number
    history: number
    vision: number
    mission: number
    address: number
    accreditation: number
    _all: number
  }


  export type SchoolDetailAvgAggregateInputType = {
    id?: true
    year_built?: true
  }

  export type SchoolDetailSumAggregateInputType = {
    id?: true
    year_built?: true
  }

  export type SchoolDetailMinAggregateInputType = {
    id?: true
    name?: true
    small_details?: true
    year_built?: true
    history?: true
    vision?: true
    mission?: true
    address?: true
    accreditation?: true
  }

  export type SchoolDetailMaxAggregateInputType = {
    id?: true
    name?: true
    small_details?: true
    year_built?: true
    history?: true
    vision?: true
    mission?: true
    address?: true
    accreditation?: true
  }

  export type SchoolDetailCountAggregateInputType = {
    id?: true
    name?: true
    small_details?: true
    year_built?: true
    history?: true
    vision?: true
    mission?: true
    address?: true
    accreditation?: true
    _all?: true
  }

  export type SchoolDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolDetail to aggregate.
     */
    where?: SchoolDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolDetails to fetch.
     */
    orderBy?: SchoolDetailOrderByWithRelationInput | SchoolDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolDetails
    **/
    _count?: true | SchoolDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolDetailMaxAggregateInputType
  }

  export type GetSchoolDetailAggregateType<T extends SchoolDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolDetail[P]>
      : GetScalarType<T[P], AggregateSchoolDetail[P]>
  }




  export type SchoolDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolDetailWhereInput
    orderBy?: SchoolDetailOrderByWithAggregationInput | SchoolDetailOrderByWithAggregationInput[]
    by: SchoolDetailScalarFieldEnum[] | SchoolDetailScalarFieldEnum
    having?: SchoolDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolDetailCountAggregateInputType | true
    _avg?: SchoolDetailAvgAggregateInputType
    _sum?: SchoolDetailSumAggregateInputType
    _min?: SchoolDetailMinAggregateInputType
    _max?: SchoolDetailMaxAggregateInputType
  }

  export type SchoolDetailGroupByOutputType = {
    id: number
    name: string | null
    small_details: string | null
    year_built: number | null
    history: string | null
    vision: string | null
    mission: string | null
    address: string | null
    accreditation: string | null
    _count: SchoolDetailCountAggregateOutputType | null
    _avg: SchoolDetailAvgAggregateOutputType | null
    _sum: SchoolDetailSumAggregateOutputType | null
    _min: SchoolDetailMinAggregateOutputType | null
    _max: SchoolDetailMaxAggregateOutputType | null
  }

  type GetSchoolDetailGroupByPayload<T extends SchoolDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolDetailGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolDetailGroupByOutputType[P]>
        }
      >
    >


  export type SchoolDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    small_details?: boolean
    year_built?: boolean
    history?: boolean
    vision?: boolean
    mission?: boolean
    address?: boolean
    accreditation?: boolean
    contacts?: boolean | SchoolDetail$contactsArgs<ExtArgs>
    school_faqs?: boolean | SchoolDetail$school_faqsArgs<ExtArgs>
    _count?: boolean | SchoolDetailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolDetail"]>

  export type SchoolDetailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    small_details?: boolean
    year_built?: boolean
    history?: boolean
    vision?: boolean
    mission?: boolean
    address?: boolean
    accreditation?: boolean
  }, ExtArgs["result"]["schoolDetail"]>

  export type SchoolDetailSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    small_details?: boolean
    year_built?: boolean
    history?: boolean
    vision?: boolean
    mission?: boolean
    address?: boolean
    accreditation?: boolean
  }, ExtArgs["result"]["schoolDetail"]>

  export type SchoolDetailSelectScalar = {
    id?: boolean
    name?: boolean
    small_details?: boolean
    year_built?: boolean
    history?: boolean
    vision?: boolean
    mission?: boolean
    address?: boolean
    accreditation?: boolean
  }

  export type SchoolDetailOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "small_details" | "year_built" | "history" | "vision" | "mission" | "address" | "accreditation", ExtArgs["result"]["schoolDetail"]>
  export type SchoolDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contacts?: boolean | SchoolDetail$contactsArgs<ExtArgs>
    school_faqs?: boolean | SchoolDetail$school_faqsArgs<ExtArgs>
    _count?: boolean | SchoolDetailCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SchoolDetailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SchoolDetailIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SchoolDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolDetail"
    objects: {
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      school_faqs: Prisma.$SchoolFaqPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string | null
      small_details: string | null
      year_built: number | null
      history: string | null
      vision: string | null
      mission: string | null
      address: string | null
      accreditation: string | null
    }, ExtArgs["result"]["schoolDetail"]>
    composites: {}
  }

  type SchoolDetailGetPayload<S extends boolean | null | undefined | SchoolDetailDefaultArgs> = $Result.GetResult<Prisma.$SchoolDetailPayload, S>

  type SchoolDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchoolDetailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchoolDetailCountAggregateInputType | true
    }

  export interface SchoolDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolDetail'], meta: { name: 'SchoolDetail' } }
    /**
     * Find zero or one SchoolDetail that matches the filter.
     * @param {SchoolDetailFindUniqueArgs} args - Arguments to find a SchoolDetail
     * @example
     * // Get one SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolDetailFindUniqueArgs>(args: SelectSubset<T, SchoolDetailFindUniqueArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SchoolDetail that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchoolDetailFindUniqueOrThrowArgs} args - Arguments to find a SchoolDetail
     * @example
     * // Get one SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolDetailFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolDetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchoolDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailFindFirstArgs} args - Arguments to find a SchoolDetail
     * @example
     * // Get one SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolDetailFindFirstArgs>(args?: SelectSubset<T, SchoolDetailFindFirstArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchoolDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailFindFirstOrThrowArgs} args - Arguments to find a SchoolDetail
     * @example
     * // Get one SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolDetailFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolDetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SchoolDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolDetails
     * const schoolDetails = await prisma.schoolDetail.findMany()
     * 
     * // Get first 10 SchoolDetails
     * const schoolDetails = await prisma.schoolDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolDetailWithIdOnly = await prisma.schoolDetail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolDetailFindManyArgs>(args?: SelectSubset<T, SchoolDetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SchoolDetail.
     * @param {SchoolDetailCreateArgs} args - Arguments to create a SchoolDetail.
     * @example
     * // Create one SchoolDetail
     * const SchoolDetail = await prisma.schoolDetail.create({
     *   data: {
     *     // ... data to create a SchoolDetail
     *   }
     * })
     * 
     */
    create<T extends SchoolDetailCreateArgs>(args: SelectSubset<T, SchoolDetailCreateArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SchoolDetails.
     * @param {SchoolDetailCreateManyArgs} args - Arguments to create many SchoolDetails.
     * @example
     * // Create many SchoolDetails
     * const schoolDetail = await prisma.schoolDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolDetailCreateManyArgs>(args?: SelectSubset<T, SchoolDetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchoolDetails and returns the data saved in the database.
     * @param {SchoolDetailCreateManyAndReturnArgs} args - Arguments to create many SchoolDetails.
     * @example
     * // Create many SchoolDetails
     * const schoolDetail = await prisma.schoolDetail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchoolDetails and only return the `id`
     * const schoolDetailWithIdOnly = await prisma.schoolDetail.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolDetailCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolDetailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SchoolDetail.
     * @param {SchoolDetailDeleteArgs} args - Arguments to delete one SchoolDetail.
     * @example
     * // Delete one SchoolDetail
     * const SchoolDetail = await prisma.schoolDetail.delete({
     *   where: {
     *     // ... filter to delete one SchoolDetail
     *   }
     * })
     * 
     */
    delete<T extends SchoolDetailDeleteArgs>(args: SelectSubset<T, SchoolDetailDeleteArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SchoolDetail.
     * @param {SchoolDetailUpdateArgs} args - Arguments to update one SchoolDetail.
     * @example
     * // Update one SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolDetailUpdateArgs>(args: SelectSubset<T, SchoolDetailUpdateArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SchoolDetails.
     * @param {SchoolDetailDeleteManyArgs} args - Arguments to filter SchoolDetails to delete.
     * @example
     * // Delete a few SchoolDetails
     * const { count } = await prisma.schoolDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolDetailDeleteManyArgs>(args?: SelectSubset<T, SchoolDetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolDetails
     * const schoolDetail = await prisma.schoolDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolDetailUpdateManyArgs>(args: SelectSubset<T, SchoolDetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolDetails and returns the data updated in the database.
     * @param {SchoolDetailUpdateManyAndReturnArgs} args - Arguments to update many SchoolDetails.
     * @example
     * // Update many SchoolDetails
     * const schoolDetail = await prisma.schoolDetail.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SchoolDetails and only return the `id`
     * const schoolDetailWithIdOnly = await prisma.schoolDetail.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SchoolDetailUpdateManyAndReturnArgs>(args: SelectSubset<T, SchoolDetailUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SchoolDetail.
     * @param {SchoolDetailUpsertArgs} args - Arguments to update or create a SchoolDetail.
     * @example
     * // Update or create a SchoolDetail
     * const schoolDetail = await prisma.schoolDetail.upsert({
     *   create: {
     *     // ... data to create a SchoolDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolDetail we want to update
     *   }
     * })
     */
    upsert<T extends SchoolDetailUpsertArgs>(args: SelectSubset<T, SchoolDetailUpsertArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SchoolDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailCountArgs} args - Arguments to filter SchoolDetails to count.
     * @example
     * // Count the number of SchoolDetails
     * const count = await prisma.schoolDetail.count({
     *   where: {
     *     // ... the filter for the SchoolDetails we want to count
     *   }
     * })
    **/
    count<T extends SchoolDetailCountArgs>(
      args?: Subset<T, SchoolDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolDetailAggregateArgs>(args: Subset<T, SchoolDetailAggregateArgs>): Prisma.PrismaPromise<GetSchoolDetailAggregateType<T>>

    /**
     * Group by SchoolDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolDetailGroupByArgs['orderBy'] }
        : { orderBy?: SchoolDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolDetail model
   */
  readonly fields: SchoolDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contacts<T extends SchoolDetail$contactsArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDetail$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    school_faqs<T extends SchoolDetail$school_faqsArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDetail$school_faqsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchoolDetail model
   */
  interface SchoolDetailFieldRefs {
    readonly id: FieldRef<"SchoolDetail", 'Int'>
    readonly name: FieldRef<"SchoolDetail", 'String'>
    readonly small_details: FieldRef<"SchoolDetail", 'String'>
    readonly year_built: FieldRef<"SchoolDetail", 'Int'>
    readonly history: FieldRef<"SchoolDetail", 'String'>
    readonly vision: FieldRef<"SchoolDetail", 'String'>
    readonly mission: FieldRef<"SchoolDetail", 'String'>
    readonly address: FieldRef<"SchoolDetail", 'String'>
    readonly accreditation: FieldRef<"SchoolDetail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SchoolDetail findUnique
   */
  export type SchoolDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter, which SchoolDetail to fetch.
     */
    where: SchoolDetailWhereUniqueInput
  }

  /**
   * SchoolDetail findUniqueOrThrow
   */
  export type SchoolDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter, which SchoolDetail to fetch.
     */
    where: SchoolDetailWhereUniqueInput
  }

  /**
   * SchoolDetail findFirst
   */
  export type SchoolDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter, which SchoolDetail to fetch.
     */
    where?: SchoolDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolDetails to fetch.
     */
    orderBy?: SchoolDetailOrderByWithRelationInput | SchoolDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolDetails.
     */
    cursor?: SchoolDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolDetails.
     */
    distinct?: SchoolDetailScalarFieldEnum | SchoolDetailScalarFieldEnum[]
  }

  /**
   * SchoolDetail findFirstOrThrow
   */
  export type SchoolDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter, which SchoolDetail to fetch.
     */
    where?: SchoolDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolDetails to fetch.
     */
    orderBy?: SchoolDetailOrderByWithRelationInput | SchoolDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolDetails.
     */
    cursor?: SchoolDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolDetails.
     */
    distinct?: SchoolDetailScalarFieldEnum | SchoolDetailScalarFieldEnum[]
  }

  /**
   * SchoolDetail findMany
   */
  export type SchoolDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter, which SchoolDetails to fetch.
     */
    where?: SchoolDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolDetails to fetch.
     */
    orderBy?: SchoolDetailOrderByWithRelationInput | SchoolDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolDetails.
     */
    cursor?: SchoolDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolDetails.
     */
    skip?: number
    distinct?: SchoolDetailScalarFieldEnum | SchoolDetailScalarFieldEnum[]
  }

  /**
   * SchoolDetail create
   */
  export type SchoolDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolDetail.
     */
    data?: XOR<SchoolDetailCreateInput, SchoolDetailUncheckedCreateInput>
  }

  /**
   * SchoolDetail createMany
   */
  export type SchoolDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolDetails.
     */
    data: SchoolDetailCreateManyInput | SchoolDetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchoolDetail createManyAndReturn
   */
  export type SchoolDetailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * The data used to create many SchoolDetails.
     */
    data: SchoolDetailCreateManyInput | SchoolDetailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchoolDetail update
   */
  export type SchoolDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolDetail.
     */
    data: XOR<SchoolDetailUpdateInput, SchoolDetailUncheckedUpdateInput>
    /**
     * Choose, which SchoolDetail to update.
     */
    where: SchoolDetailWhereUniqueInput
  }

  /**
   * SchoolDetail updateMany
   */
  export type SchoolDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolDetails.
     */
    data: XOR<SchoolDetailUpdateManyMutationInput, SchoolDetailUncheckedUpdateManyInput>
    /**
     * Filter which SchoolDetails to update
     */
    where?: SchoolDetailWhereInput
    /**
     * Limit how many SchoolDetails to update.
     */
    limit?: number
  }

  /**
   * SchoolDetail updateManyAndReturn
   */
  export type SchoolDetailUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * The data used to update SchoolDetails.
     */
    data: XOR<SchoolDetailUpdateManyMutationInput, SchoolDetailUncheckedUpdateManyInput>
    /**
     * Filter which SchoolDetails to update
     */
    where?: SchoolDetailWhereInput
    /**
     * Limit how many SchoolDetails to update.
     */
    limit?: number
  }

  /**
   * SchoolDetail upsert
   */
  export type SchoolDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolDetail to update in case it exists.
     */
    where: SchoolDetailWhereUniqueInput
    /**
     * In case the SchoolDetail found by the `where` argument doesn't exist, create a new SchoolDetail with this data.
     */
    create: XOR<SchoolDetailCreateInput, SchoolDetailUncheckedCreateInput>
    /**
     * In case the SchoolDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolDetailUpdateInput, SchoolDetailUncheckedUpdateInput>
  }

  /**
   * SchoolDetail delete
   */
  export type SchoolDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
    /**
     * Filter which SchoolDetail to delete.
     */
    where: SchoolDetailWhereUniqueInput
  }

  /**
   * SchoolDetail deleteMany
   */
  export type SchoolDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolDetails to delete
     */
    where?: SchoolDetailWhereInput
    /**
     * Limit how many SchoolDetails to delete.
     */
    limit?: number
  }

  /**
   * SchoolDetail.contacts
   */
  export type SchoolDetail$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * SchoolDetail.school_faqs
   */
  export type SchoolDetail$school_faqsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    where?: SchoolFaqWhereInput
    orderBy?: SchoolFaqOrderByWithRelationInput | SchoolFaqOrderByWithRelationInput[]
    cursor?: SchoolFaqWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SchoolFaqScalarFieldEnum | SchoolFaqScalarFieldEnum[]
  }

  /**
   * SchoolDetail without action
   */
  export type SchoolDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolDetail
     */
    select?: SchoolDetailSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolDetail
     */
    omit?: SchoolDetailOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolDetailInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
  }

  export type ContactSumAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
  }

  export type ContactMinAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    info: string | null
    website: string | null
    number: string | null
  }

  export type ContactMaxAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    info: string | null
    website: string | null
    number: string | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    school_detail_id: number
    info: number
    website: number
    number: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    id?: true
    school_detail_id?: true
  }

  export type ContactSumAggregateInputType = {
    id?: true
    school_detail_id?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    school_detail_id?: true
    info?: true
    website?: true
    number?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    school_detail_id?: true
    info?: true
    website?: true
    number?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    school_detail_id?: true
    info?: true
    website?: true
    number?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: number
    school_detail_id: number
    info: string | null
    website: string | null
    number: string | null
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    info?: boolean
    website?: boolean
    number?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    info?: boolean
    website?: boolean
    number?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    info?: boolean
    website?: boolean
    number?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    school_detail_id?: boolean
    info?: boolean
    website?: boolean
    number?: boolean
  }

  export type ContactOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "school_detail_id" | "info" | "website" | "number", ExtArgs["result"]["contact"]>
  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }
  export type ContactIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      school_detail: Prisma.$SchoolDetailPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      school_detail_id: number
      info: string | null
      website: string | null
      number: string | null
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts and returns the data updated in the database.
     * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school_detail<T extends SchoolDetailDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDetailDefaultArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'Int'>
    readonly school_detail_id: FieldRef<"Contact", 'Int'>
    readonly info: FieldRef<"Contact", 'String'>
    readonly website: FieldRef<"Contact", 'String'>
    readonly number: FieldRef<"Contact", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
  }

  /**
   * Contact updateManyAndReturn
   */
  export type ContactUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
    /**
     * Limit how many Contacts to delete.
     */
    limit?: number
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Contact
     */
    omit?: ContactOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model SchoolFaq
   */

  export type AggregateSchoolFaq = {
    _count: SchoolFaqCountAggregateOutputType | null
    _avg: SchoolFaqAvgAggregateOutputType | null
    _sum: SchoolFaqSumAggregateOutputType | null
    _min: SchoolFaqMinAggregateOutputType | null
    _max: SchoolFaqMaxAggregateOutputType | null
  }

  export type SchoolFaqAvgAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    priority: number | null
    view_count: number | null
  }

  export type SchoolFaqSumAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    priority: number | null
    view_count: number | null
  }

  export type SchoolFaqMinAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    question: string | null
    answer: string | null
    category: string | null
    priority: number | null
    view_count: number | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SchoolFaqMaxAggregateOutputType = {
    id: number | null
    school_detail_id: number | null
    question: string | null
    answer: string | null
    category: string | null
    priority: number | null
    view_count: number | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SchoolFaqCountAggregateOutputType = {
    id: number
    school_detail_id: number
    question: number
    answer: number
    category: number
    priority: number
    view_count: number
    is_active: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SchoolFaqAvgAggregateInputType = {
    id?: true
    school_detail_id?: true
    priority?: true
    view_count?: true
  }

  export type SchoolFaqSumAggregateInputType = {
    id?: true
    school_detail_id?: true
    priority?: true
    view_count?: true
  }

  export type SchoolFaqMinAggregateInputType = {
    id?: true
    school_detail_id?: true
    question?: true
    answer?: true
    category?: true
    priority?: true
    view_count?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type SchoolFaqMaxAggregateInputType = {
    id?: true
    school_detail_id?: true
    question?: true
    answer?: true
    category?: true
    priority?: true
    view_count?: true
    is_active?: true
    created_at?: true
    updated_at?: true
  }

  export type SchoolFaqCountAggregateInputType = {
    id?: true
    school_detail_id?: true
    question?: true
    answer?: true
    category?: true
    priority?: true
    view_count?: true
    is_active?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SchoolFaqAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolFaq to aggregate.
     */
    where?: SchoolFaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolFaqs to fetch.
     */
    orderBy?: SchoolFaqOrderByWithRelationInput | SchoolFaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SchoolFaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolFaqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolFaqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SchoolFaqs
    **/
    _count?: true | SchoolFaqCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SchoolFaqAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SchoolFaqSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SchoolFaqMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SchoolFaqMaxAggregateInputType
  }

  export type GetSchoolFaqAggregateType<T extends SchoolFaqAggregateArgs> = {
        [P in keyof T & keyof AggregateSchoolFaq]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchoolFaq[P]>
      : GetScalarType<T[P], AggregateSchoolFaq[P]>
  }




  export type SchoolFaqGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SchoolFaqWhereInput
    orderBy?: SchoolFaqOrderByWithAggregationInput | SchoolFaqOrderByWithAggregationInput[]
    by: SchoolFaqScalarFieldEnum[] | SchoolFaqScalarFieldEnum
    having?: SchoolFaqScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SchoolFaqCountAggregateInputType | true
    _avg?: SchoolFaqAvgAggregateInputType
    _sum?: SchoolFaqSumAggregateInputType
    _min?: SchoolFaqMinAggregateInputType
    _max?: SchoolFaqMaxAggregateInputType
  }

  export type SchoolFaqGroupByOutputType = {
    id: number
    school_detail_id: number
    question: string | null
    answer: string | null
    category: string | null
    priority: number | null
    view_count: number | null
    is_active: boolean | null
    created_at: Date | null
    updated_at: Date | null
    _count: SchoolFaqCountAggregateOutputType | null
    _avg: SchoolFaqAvgAggregateOutputType | null
    _sum: SchoolFaqSumAggregateOutputType | null
    _min: SchoolFaqMinAggregateOutputType | null
    _max: SchoolFaqMaxAggregateOutputType | null
  }

  type GetSchoolFaqGroupByPayload<T extends SchoolFaqGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SchoolFaqGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SchoolFaqGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SchoolFaqGroupByOutputType[P]>
            : GetScalarType<T[P], SchoolFaqGroupByOutputType[P]>
        }
      >
    >


  export type SchoolFaqSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    priority?: boolean
    view_count?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolFaq"]>

  export type SchoolFaqSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    priority?: boolean
    view_count?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolFaq"]>

  export type SchoolFaqSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    school_detail_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    priority?: boolean
    view_count?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schoolFaq"]>

  export type SchoolFaqSelectScalar = {
    id?: boolean
    school_detail_id?: boolean
    question?: boolean
    answer?: boolean
    category?: boolean
    priority?: boolean
    view_count?: boolean
    is_active?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SchoolFaqOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "school_detail_id" | "question" | "answer" | "category" | "priority" | "view_count" | "is_active" | "created_at" | "updated_at", ExtArgs["result"]["schoolFaq"]>
  export type SchoolFaqInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }
  export type SchoolFaqIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }
  export type SchoolFaqIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    school_detail?: boolean | SchoolDetailDefaultArgs<ExtArgs>
  }

  export type $SchoolFaqPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SchoolFaq"
    objects: {
      school_detail: Prisma.$SchoolDetailPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      school_detail_id: number
      question: string | null
      answer: string | null
      category: string | null
      priority: number | null
      view_count: number | null
      is_active: boolean | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["schoolFaq"]>
    composites: {}
  }

  type SchoolFaqGetPayload<S extends boolean | null | undefined | SchoolFaqDefaultArgs> = $Result.GetResult<Prisma.$SchoolFaqPayload, S>

  type SchoolFaqCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SchoolFaqFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SchoolFaqCountAggregateInputType | true
    }

  export interface SchoolFaqDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SchoolFaq'], meta: { name: 'SchoolFaq' } }
    /**
     * Find zero or one SchoolFaq that matches the filter.
     * @param {SchoolFaqFindUniqueArgs} args - Arguments to find a SchoolFaq
     * @example
     * // Get one SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SchoolFaqFindUniqueArgs>(args: SelectSubset<T, SchoolFaqFindUniqueArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SchoolFaq that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SchoolFaqFindUniqueOrThrowArgs} args - Arguments to find a SchoolFaq
     * @example
     * // Get one SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SchoolFaqFindUniqueOrThrowArgs>(args: SelectSubset<T, SchoolFaqFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchoolFaq that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqFindFirstArgs} args - Arguments to find a SchoolFaq
     * @example
     * // Get one SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SchoolFaqFindFirstArgs>(args?: SelectSubset<T, SchoolFaqFindFirstArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SchoolFaq that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqFindFirstOrThrowArgs} args - Arguments to find a SchoolFaq
     * @example
     * // Get one SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SchoolFaqFindFirstOrThrowArgs>(args?: SelectSubset<T, SchoolFaqFindFirstOrThrowArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SchoolFaqs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SchoolFaqs
     * const schoolFaqs = await prisma.schoolFaq.findMany()
     * 
     * // Get first 10 SchoolFaqs
     * const schoolFaqs = await prisma.schoolFaq.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const schoolFaqWithIdOnly = await prisma.schoolFaq.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SchoolFaqFindManyArgs>(args?: SelectSubset<T, SchoolFaqFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SchoolFaq.
     * @param {SchoolFaqCreateArgs} args - Arguments to create a SchoolFaq.
     * @example
     * // Create one SchoolFaq
     * const SchoolFaq = await prisma.schoolFaq.create({
     *   data: {
     *     // ... data to create a SchoolFaq
     *   }
     * })
     * 
     */
    create<T extends SchoolFaqCreateArgs>(args: SelectSubset<T, SchoolFaqCreateArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SchoolFaqs.
     * @param {SchoolFaqCreateManyArgs} args - Arguments to create many SchoolFaqs.
     * @example
     * // Create many SchoolFaqs
     * const schoolFaq = await prisma.schoolFaq.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SchoolFaqCreateManyArgs>(args?: SelectSubset<T, SchoolFaqCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SchoolFaqs and returns the data saved in the database.
     * @param {SchoolFaqCreateManyAndReturnArgs} args - Arguments to create many SchoolFaqs.
     * @example
     * // Create many SchoolFaqs
     * const schoolFaq = await prisma.schoolFaq.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SchoolFaqs and only return the `id`
     * const schoolFaqWithIdOnly = await prisma.schoolFaq.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SchoolFaqCreateManyAndReturnArgs>(args?: SelectSubset<T, SchoolFaqCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SchoolFaq.
     * @param {SchoolFaqDeleteArgs} args - Arguments to delete one SchoolFaq.
     * @example
     * // Delete one SchoolFaq
     * const SchoolFaq = await prisma.schoolFaq.delete({
     *   where: {
     *     // ... filter to delete one SchoolFaq
     *   }
     * })
     * 
     */
    delete<T extends SchoolFaqDeleteArgs>(args: SelectSubset<T, SchoolFaqDeleteArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SchoolFaq.
     * @param {SchoolFaqUpdateArgs} args - Arguments to update one SchoolFaq.
     * @example
     * // Update one SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SchoolFaqUpdateArgs>(args: SelectSubset<T, SchoolFaqUpdateArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SchoolFaqs.
     * @param {SchoolFaqDeleteManyArgs} args - Arguments to filter SchoolFaqs to delete.
     * @example
     * // Delete a few SchoolFaqs
     * const { count } = await prisma.schoolFaq.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SchoolFaqDeleteManyArgs>(args?: SelectSubset<T, SchoolFaqDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolFaqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SchoolFaqs
     * const schoolFaq = await prisma.schoolFaq.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SchoolFaqUpdateManyArgs>(args: SelectSubset<T, SchoolFaqUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SchoolFaqs and returns the data updated in the database.
     * @param {SchoolFaqUpdateManyAndReturnArgs} args - Arguments to update many SchoolFaqs.
     * @example
     * // Update many SchoolFaqs
     * const schoolFaq = await prisma.schoolFaq.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SchoolFaqs and only return the `id`
     * const schoolFaqWithIdOnly = await prisma.schoolFaq.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SchoolFaqUpdateManyAndReturnArgs>(args: SelectSubset<T, SchoolFaqUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SchoolFaq.
     * @param {SchoolFaqUpsertArgs} args - Arguments to update or create a SchoolFaq.
     * @example
     * // Update or create a SchoolFaq
     * const schoolFaq = await prisma.schoolFaq.upsert({
     *   create: {
     *     // ... data to create a SchoolFaq
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SchoolFaq we want to update
     *   }
     * })
     */
    upsert<T extends SchoolFaqUpsertArgs>(args: SelectSubset<T, SchoolFaqUpsertArgs<ExtArgs>>): Prisma__SchoolFaqClient<$Result.GetResult<Prisma.$SchoolFaqPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SchoolFaqs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqCountArgs} args - Arguments to filter SchoolFaqs to count.
     * @example
     * // Count the number of SchoolFaqs
     * const count = await prisma.schoolFaq.count({
     *   where: {
     *     // ... the filter for the SchoolFaqs we want to count
     *   }
     * })
    **/
    count<T extends SchoolFaqCountArgs>(
      args?: Subset<T, SchoolFaqCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SchoolFaqCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SchoolFaq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SchoolFaqAggregateArgs>(args: Subset<T, SchoolFaqAggregateArgs>): Prisma.PrismaPromise<GetSchoolFaqAggregateType<T>>

    /**
     * Group by SchoolFaq.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SchoolFaqGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SchoolFaqGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SchoolFaqGroupByArgs['orderBy'] }
        : { orderBy?: SchoolFaqGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SchoolFaqGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSchoolFaqGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SchoolFaq model
   */
  readonly fields: SchoolFaqFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SchoolFaq.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SchoolFaqClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    school_detail<T extends SchoolDetailDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SchoolDetailDefaultArgs<ExtArgs>>): Prisma__SchoolDetailClient<$Result.GetResult<Prisma.$SchoolDetailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SchoolFaq model
   */
  interface SchoolFaqFieldRefs {
    readonly id: FieldRef<"SchoolFaq", 'Int'>
    readonly school_detail_id: FieldRef<"SchoolFaq", 'Int'>
    readonly question: FieldRef<"SchoolFaq", 'String'>
    readonly answer: FieldRef<"SchoolFaq", 'String'>
    readonly category: FieldRef<"SchoolFaq", 'String'>
    readonly priority: FieldRef<"SchoolFaq", 'Int'>
    readonly view_count: FieldRef<"SchoolFaq", 'Int'>
    readonly is_active: FieldRef<"SchoolFaq", 'Boolean'>
    readonly created_at: FieldRef<"SchoolFaq", 'DateTime'>
    readonly updated_at: FieldRef<"SchoolFaq", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SchoolFaq findUnique
   */
  export type SchoolFaqFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter, which SchoolFaq to fetch.
     */
    where: SchoolFaqWhereUniqueInput
  }

  /**
   * SchoolFaq findUniqueOrThrow
   */
  export type SchoolFaqFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter, which SchoolFaq to fetch.
     */
    where: SchoolFaqWhereUniqueInput
  }

  /**
   * SchoolFaq findFirst
   */
  export type SchoolFaqFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter, which SchoolFaq to fetch.
     */
    where?: SchoolFaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolFaqs to fetch.
     */
    orderBy?: SchoolFaqOrderByWithRelationInput | SchoolFaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolFaqs.
     */
    cursor?: SchoolFaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolFaqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolFaqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolFaqs.
     */
    distinct?: SchoolFaqScalarFieldEnum | SchoolFaqScalarFieldEnum[]
  }

  /**
   * SchoolFaq findFirstOrThrow
   */
  export type SchoolFaqFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter, which SchoolFaq to fetch.
     */
    where?: SchoolFaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolFaqs to fetch.
     */
    orderBy?: SchoolFaqOrderByWithRelationInput | SchoolFaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SchoolFaqs.
     */
    cursor?: SchoolFaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolFaqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolFaqs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SchoolFaqs.
     */
    distinct?: SchoolFaqScalarFieldEnum | SchoolFaqScalarFieldEnum[]
  }

  /**
   * SchoolFaq findMany
   */
  export type SchoolFaqFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter, which SchoolFaqs to fetch.
     */
    where?: SchoolFaqWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SchoolFaqs to fetch.
     */
    orderBy?: SchoolFaqOrderByWithRelationInput | SchoolFaqOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SchoolFaqs.
     */
    cursor?: SchoolFaqWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SchoolFaqs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SchoolFaqs.
     */
    skip?: number
    distinct?: SchoolFaqScalarFieldEnum | SchoolFaqScalarFieldEnum[]
  }

  /**
   * SchoolFaq create
   */
  export type SchoolFaqCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * The data needed to create a SchoolFaq.
     */
    data: XOR<SchoolFaqCreateInput, SchoolFaqUncheckedCreateInput>
  }

  /**
   * SchoolFaq createMany
   */
  export type SchoolFaqCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SchoolFaqs.
     */
    data: SchoolFaqCreateManyInput | SchoolFaqCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SchoolFaq createManyAndReturn
   */
  export type SchoolFaqCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * The data used to create many SchoolFaqs.
     */
    data: SchoolFaqCreateManyInput | SchoolFaqCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchoolFaq update
   */
  export type SchoolFaqUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * The data needed to update a SchoolFaq.
     */
    data: XOR<SchoolFaqUpdateInput, SchoolFaqUncheckedUpdateInput>
    /**
     * Choose, which SchoolFaq to update.
     */
    where: SchoolFaqWhereUniqueInput
  }

  /**
   * SchoolFaq updateMany
   */
  export type SchoolFaqUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SchoolFaqs.
     */
    data: XOR<SchoolFaqUpdateManyMutationInput, SchoolFaqUncheckedUpdateManyInput>
    /**
     * Filter which SchoolFaqs to update
     */
    where?: SchoolFaqWhereInput
    /**
     * Limit how many SchoolFaqs to update.
     */
    limit?: number
  }

  /**
   * SchoolFaq updateManyAndReturn
   */
  export type SchoolFaqUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * The data used to update SchoolFaqs.
     */
    data: XOR<SchoolFaqUpdateManyMutationInput, SchoolFaqUncheckedUpdateManyInput>
    /**
     * Filter which SchoolFaqs to update
     */
    where?: SchoolFaqWhereInput
    /**
     * Limit how many SchoolFaqs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SchoolFaq upsert
   */
  export type SchoolFaqUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * The filter to search for the SchoolFaq to update in case it exists.
     */
    where: SchoolFaqWhereUniqueInput
    /**
     * In case the SchoolFaq found by the `where` argument doesn't exist, create a new SchoolFaq with this data.
     */
    create: XOR<SchoolFaqCreateInput, SchoolFaqUncheckedCreateInput>
    /**
     * In case the SchoolFaq was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SchoolFaqUpdateInput, SchoolFaqUncheckedUpdateInput>
  }

  /**
   * SchoolFaq delete
   */
  export type SchoolFaqDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
    /**
     * Filter which SchoolFaq to delete.
     */
    where: SchoolFaqWhereUniqueInput
  }

  /**
   * SchoolFaq deleteMany
   */
  export type SchoolFaqDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SchoolFaqs to delete
     */
    where?: SchoolFaqWhereInput
    /**
     * Limit how many SchoolFaqs to delete.
     */
    limit?: number
  }

  /**
   * SchoolFaq without action
   */
  export type SchoolFaqDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SchoolFaq
     */
    select?: SchoolFaqSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SchoolFaq
     */
    omit?: SchoolFaqOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SchoolFaqInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    last_active: 'last_active'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const QueryScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    chatbot_session_id: 'chatbot_session_id',
    query_text: 'query_text',
    users_data_inputed: 'users_data_inputed',
    chatbot_response: 'chatbot_response',
    created_at: 'created_at'
  };

  export type QueryScalarFieldEnum = (typeof QueryScalarFieldEnum)[keyof typeof QueryScalarFieldEnum]


  export const ChatbotSessionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    chatbot_response: 'chatbot_response',
    response_time: 'response_time',
    total_queries: 'total_queries'
  };

  export type ChatbotSessionScalarFieldEnum = (typeof ChatbotSessionScalarFieldEnum)[keyof typeof ChatbotSessionScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    query_id: 'query_id',
    user_id: 'user_id',
    rating: 'rating',
    comment: 'comment',
    resolved_issue: 'resolved_issue',
    created_at: 'created_at'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    department_id: 'department_id',
    employee_name: 'employee_name',
    teachers_details: 'teachers_details',
    office_location: 'office_location'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    tuition_fee: 'tuition_fee',
    head_name: 'head_name',
    description: 'description',
    building: 'building',
    floor: 'floor',
    career_path: 'career_path',
    created_at: 'created_at'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    department_id: 'department_id',
    name: 'name',
    total_course: 'total_course'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const FaqScalarFieldEnum: {
    id: 'id',
    department_id: 'department_id',
    question: 'question',
    answer: 'answer',
    category: 'category'
  };

  export type FaqScalarFieldEnum = (typeof FaqScalarFieldEnum)[keyof typeof FaqScalarFieldEnum]


  export const QuestionKeywordScalarFieldEnum: {
    id: 'id',
    faq_id: 'faq_id',
    keyword: 'keyword',
    created_at: 'created_at'
  };

  export type QuestionKeywordScalarFieldEnum = (typeof QuestionKeywordScalarFieldEnum)[keyof typeof QuestionKeywordScalarFieldEnum]


  export const GreetingScalarFieldEnum: {
    id: 'id',
    message: 'message'
  };

  export type GreetingScalarFieldEnum = (typeof GreetingScalarFieldEnum)[keyof typeof GreetingScalarFieldEnum]


  export const SchoolDetailScalarFieldEnum: {
    id: 'id',
    name: 'name',
    small_details: 'small_details',
    year_built: 'year_built',
    history: 'history',
    vision: 'vision',
    mission: 'mission',
    address: 'address',
    accreditation: 'accreditation'
  };

  export type SchoolDetailScalarFieldEnum = (typeof SchoolDetailScalarFieldEnum)[keyof typeof SchoolDetailScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    school_detail_id: 'school_detail_id',
    info: 'info',
    website: 'website',
    number: 'number'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const SchoolFaqScalarFieldEnum: {
    id: 'id',
    school_detail_id: 'school_detail_id',
    question: 'question',
    answer: 'answer',
    category: 'category',
    priority: 'priority',
    view_count: 'view_count',
    is_active: 'is_active',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SchoolFaqScalarFieldEnum = (typeof SchoolFaqScalarFieldEnum)[keyof typeof SchoolFaqScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    created_at?: DateTimeFilter<"User"> | Date | string
    last_active?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: ChatbotSessionListRelationFilter
    queries?: QueryListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    last_active?: SortOrderInput | SortOrder
    sessions?: ChatbotSessionOrderByRelationAggregateInput
    queries?: QueryOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    created_at?: DateTimeFilter<"User"> | Date | string
    last_active?: DateTimeNullableFilter<"User"> | Date | string | null
    sessions?: ChatbotSessionListRelationFilter
    queries?: QueryListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    last_active?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    last_active?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type QueryWhereInput = {
    AND?: QueryWhereInput | QueryWhereInput[]
    OR?: QueryWhereInput[]
    NOT?: QueryWhereInput | QueryWhereInput[]
    id?: IntFilter<"Query"> | number
    user_id?: IntFilter<"Query"> | number
    chatbot_session_id?: IntFilter<"Query"> | number
    query_text?: StringNullableFilter<"Query"> | string | null
    users_data_inputed?: StringNullableListFilter<"Query">
    chatbot_response?: StringNullableListFilter<"Query">
    created_at?: DateTimeNullableFilter<"Query"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<ChatbotSessionScalarRelationFilter, ChatbotSessionWhereInput>
    feedback?: FeedbackListRelationFilter
  }

  export type QueryOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
    query_text?: SortOrderInput | SortOrder
    users_data_inputed?: SortOrder
    chatbot_response?: SortOrder
    created_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    session?: ChatbotSessionOrderByWithRelationInput
    feedback?: FeedbackOrderByRelationAggregateInput
  }

  export type QueryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QueryWhereInput | QueryWhereInput[]
    OR?: QueryWhereInput[]
    NOT?: QueryWhereInput | QueryWhereInput[]
    user_id?: IntFilter<"Query"> | number
    chatbot_session_id?: IntFilter<"Query"> | number
    query_text?: StringNullableFilter<"Query"> | string | null
    users_data_inputed?: StringNullableListFilter<"Query">
    chatbot_response?: StringNullableListFilter<"Query">
    created_at?: DateTimeNullableFilter<"Query"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    session?: XOR<ChatbotSessionScalarRelationFilter, ChatbotSessionWhereInput>
    feedback?: FeedbackListRelationFilter
  }, "id">

  export type QueryOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
    query_text?: SortOrderInput | SortOrder
    users_data_inputed?: SortOrder
    chatbot_response?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: QueryCountOrderByAggregateInput
    _avg?: QueryAvgOrderByAggregateInput
    _max?: QueryMaxOrderByAggregateInput
    _min?: QueryMinOrderByAggregateInput
    _sum?: QuerySumOrderByAggregateInput
  }

  export type QueryScalarWhereWithAggregatesInput = {
    AND?: QueryScalarWhereWithAggregatesInput | QueryScalarWhereWithAggregatesInput[]
    OR?: QueryScalarWhereWithAggregatesInput[]
    NOT?: QueryScalarWhereWithAggregatesInput | QueryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Query"> | number
    user_id?: IntWithAggregatesFilter<"Query"> | number
    chatbot_session_id?: IntWithAggregatesFilter<"Query"> | number
    query_text?: StringNullableWithAggregatesFilter<"Query"> | string | null
    users_data_inputed?: StringNullableListFilter<"Query">
    chatbot_response?: StringNullableListFilter<"Query">
    created_at?: DateTimeNullableWithAggregatesFilter<"Query"> | Date | string | null
  }

  export type ChatbotSessionWhereInput = {
    AND?: ChatbotSessionWhereInput | ChatbotSessionWhereInput[]
    OR?: ChatbotSessionWhereInput[]
    NOT?: ChatbotSessionWhereInput | ChatbotSessionWhereInput[]
    id?: IntFilter<"ChatbotSession"> | number
    user_id?: IntFilter<"ChatbotSession"> | number
    chatbot_response?: StringNullableFilter<"ChatbotSession"> | string | null
    response_time?: DateTimeNullableFilter<"ChatbotSession"> | Date | string | null
    total_queries?: IntNullableFilter<"ChatbotSession"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    queries?: QueryListRelationFilter
  }

  export type ChatbotSessionOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_response?: SortOrderInput | SortOrder
    response_time?: SortOrderInput | SortOrder
    total_queries?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    queries?: QueryOrderByRelationAggregateInput
  }

  export type ChatbotSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ChatbotSessionWhereInput | ChatbotSessionWhereInput[]
    OR?: ChatbotSessionWhereInput[]
    NOT?: ChatbotSessionWhereInput | ChatbotSessionWhereInput[]
    user_id?: IntFilter<"ChatbotSession"> | number
    chatbot_response?: StringNullableFilter<"ChatbotSession"> | string | null
    response_time?: DateTimeNullableFilter<"ChatbotSession"> | Date | string | null
    total_queries?: IntNullableFilter<"ChatbotSession"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    queries?: QueryListRelationFilter
  }, "id">

  export type ChatbotSessionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_response?: SortOrderInput | SortOrder
    response_time?: SortOrderInput | SortOrder
    total_queries?: SortOrderInput | SortOrder
    _count?: ChatbotSessionCountOrderByAggregateInput
    _avg?: ChatbotSessionAvgOrderByAggregateInput
    _max?: ChatbotSessionMaxOrderByAggregateInput
    _min?: ChatbotSessionMinOrderByAggregateInput
    _sum?: ChatbotSessionSumOrderByAggregateInput
  }

  export type ChatbotSessionScalarWhereWithAggregatesInput = {
    AND?: ChatbotSessionScalarWhereWithAggregatesInput | ChatbotSessionScalarWhereWithAggregatesInput[]
    OR?: ChatbotSessionScalarWhereWithAggregatesInput[]
    NOT?: ChatbotSessionScalarWhereWithAggregatesInput | ChatbotSessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ChatbotSession"> | number
    user_id?: IntWithAggregatesFilter<"ChatbotSession"> | number
    chatbot_response?: StringNullableWithAggregatesFilter<"ChatbotSession"> | string | null
    response_time?: DateTimeNullableWithAggregatesFilter<"ChatbotSession"> | Date | string | null
    total_queries?: IntNullableWithAggregatesFilter<"ChatbotSession"> | number | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: IntFilter<"Feedback"> | number
    query_id?: IntFilter<"Feedback"> | number
    user_id?: IntFilter<"Feedback"> | number
    rating?: IntNullableFilter<"Feedback"> | number | null
    comment?: StringNullableFilter<"Feedback"> | string | null
    resolved_issue?: BoolNullableFilter<"Feedback"> | boolean | null
    created_at?: DateTimeFilter<"Feedback"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    query?: XOR<QueryScalarRelationFilter, QueryWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    resolved_issue?: SortOrderInput | SortOrder
    created_at?: SortOrder
    user?: UserOrderByWithRelationInput
    query?: QueryOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    query_id?: IntFilter<"Feedback"> | number
    user_id?: IntFilter<"Feedback"> | number
    rating?: IntNullableFilter<"Feedback"> | number | null
    comment?: StringNullableFilter<"Feedback"> | string | null
    resolved_issue?: BoolNullableFilter<"Feedback"> | boolean | null
    created_at?: DateTimeFilter<"Feedback"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    query?: XOR<QueryScalarRelationFilter, QueryWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    resolved_issue?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Feedback"> | number
    query_id?: IntWithAggregatesFilter<"Feedback"> | number
    user_id?: IntWithAggregatesFilter<"Feedback"> | number
    rating?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    resolved_issue?: BoolNullableWithAggregatesFilter<"Feedback"> | boolean | null
    created_at?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: IntFilter<"Teacher"> | number
    department_id?: IntFilter<"Teacher"> | number
    employee_name?: StringNullableFilter<"Teacher"> | string | null
    teachers_details?: StringNullableFilter<"Teacher"> | string | null
    office_location?: StringNullableFilter<"Teacher"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    department_id?: SortOrder
    employee_name?: SortOrderInput | SortOrder
    teachers_details?: SortOrderInput | SortOrder
    office_location?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    department_id?: IntFilter<"Teacher"> | number
    employee_name?: StringNullableFilter<"Teacher"> | string | null
    teachers_details?: StringNullableFilter<"Teacher"> | string | null
    office_location?: StringNullableFilter<"Teacher"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    department_id?: SortOrder
    employee_name?: SortOrderInput | SortOrder
    teachers_details?: SortOrderInput | SortOrder
    office_location?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teacher"> | number
    department_id?: IntWithAggregatesFilter<"Teacher"> | number
    employee_name?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    teachers_details?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    office_location?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: IntFilter<"Department"> | number
    name?: StringNullableFilter<"Department"> | string | null
    tuition_fee?: DecimalNullableFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    head_name?: StringNullableFilter<"Department"> | string | null
    description?: StringNullableFilter<"Department"> | string | null
    building?: StringNullableFilter<"Department"> | string | null
    floor?: StringNullableFilter<"Department"> | string | null
    career_path?: StringNullableFilter<"Department"> | string | null
    created_at?: DateTimeNullableFilter<"Department"> | Date | string | null
    teachers?: TeacherListRelationFilter
    courses?: CourseListRelationFilter
    faqs?: FaqListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    tuition_fee?: SortOrderInput | SortOrder
    head_name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    career_path?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    teachers?: TeacherOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
    faqs?: FaqOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    name?: StringNullableFilter<"Department"> | string | null
    tuition_fee?: DecimalNullableFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    head_name?: StringNullableFilter<"Department"> | string | null
    description?: StringNullableFilter<"Department"> | string | null
    building?: StringNullableFilter<"Department"> | string | null
    floor?: StringNullableFilter<"Department"> | string | null
    career_path?: StringNullableFilter<"Department"> | string | null
    created_at?: DateTimeNullableFilter<"Department"> | Date | string | null
    teachers?: TeacherListRelationFilter
    courses?: CourseListRelationFilter
    faqs?: FaqListRelationFilter
  }, "id">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    tuition_fee?: SortOrderInput | SortOrder
    head_name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    building?: SortOrderInput | SortOrder
    floor?: SortOrderInput | SortOrder
    career_path?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _avg?: DepartmentAvgOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
    _sum?: DepartmentSumOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Department"> | number
    name?: StringNullableWithAggregatesFilter<"Department"> | string | null
    tuition_fee?: DecimalNullableWithAggregatesFilter<"Department"> | Decimal | DecimalJsLike | number | string | null
    head_name?: StringNullableWithAggregatesFilter<"Department"> | string | null
    description?: StringNullableWithAggregatesFilter<"Department"> | string | null
    building?: StringNullableWithAggregatesFilter<"Department"> | string | null
    floor?: StringNullableWithAggregatesFilter<"Department"> | string | null
    career_path?: StringNullableWithAggregatesFilter<"Department"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"Department"> | Date | string | null
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    department_id?: IntFilter<"Course"> | number
    name?: StringNullableFilter<"Course"> | string | null
    total_course?: IntNullableFilter<"Course"> | number | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    department_id?: SortOrder
    name?: SortOrderInput | SortOrder
    total_course?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    department_id?: IntFilter<"Course"> | number
    name?: StringNullableFilter<"Course"> | string | null
    total_course?: IntNullableFilter<"Course"> | number | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    department_id?: SortOrder
    name?: SortOrderInput | SortOrder
    total_course?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    department_id?: IntWithAggregatesFilter<"Course"> | number
    name?: StringNullableWithAggregatesFilter<"Course"> | string | null
    total_course?: IntNullableWithAggregatesFilter<"Course"> | number | null
  }

  export type FaqWhereInput = {
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    id?: IntFilter<"Faq"> | number
    department_id?: IntFilter<"Faq"> | number
    question?: StringNullableFilter<"Faq"> | string | null
    answer?: StringNullableFilter<"Faq"> | string | null
    category?: StringNullableFilter<"Faq"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    keywords?: QuestionKeywordListRelationFilter
  }

  export type FaqOrderByWithRelationInput = {
    id?: SortOrder
    department_id?: SortOrder
    question?: SortOrderInput | SortOrder
    answer?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    keywords?: QuestionKeywordOrderByRelationAggregateInput
  }

  export type FaqWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FaqWhereInput | FaqWhereInput[]
    OR?: FaqWhereInput[]
    NOT?: FaqWhereInput | FaqWhereInput[]
    department_id?: IntFilter<"Faq"> | number
    question?: StringNullableFilter<"Faq"> | string | null
    answer?: StringNullableFilter<"Faq"> | string | null
    category?: StringNullableFilter<"Faq"> | string | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    keywords?: QuestionKeywordListRelationFilter
  }, "id">

  export type FaqOrderByWithAggregationInput = {
    id?: SortOrder
    department_id?: SortOrder
    question?: SortOrderInput | SortOrder
    answer?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    _count?: FaqCountOrderByAggregateInput
    _avg?: FaqAvgOrderByAggregateInput
    _max?: FaqMaxOrderByAggregateInput
    _min?: FaqMinOrderByAggregateInput
    _sum?: FaqSumOrderByAggregateInput
  }

  export type FaqScalarWhereWithAggregatesInput = {
    AND?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    OR?: FaqScalarWhereWithAggregatesInput[]
    NOT?: FaqScalarWhereWithAggregatesInput | FaqScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Faq"> | number
    department_id?: IntWithAggregatesFilter<"Faq"> | number
    question?: StringNullableWithAggregatesFilter<"Faq"> | string | null
    answer?: StringNullableWithAggregatesFilter<"Faq"> | string | null
    category?: StringNullableWithAggregatesFilter<"Faq"> | string | null
  }

  export type QuestionKeywordWhereInput = {
    AND?: QuestionKeywordWhereInput | QuestionKeywordWhereInput[]
    OR?: QuestionKeywordWhereInput[]
    NOT?: QuestionKeywordWhereInput | QuestionKeywordWhereInput[]
    id?: IntFilter<"QuestionKeyword"> | number
    faq_id?: IntFilter<"QuestionKeyword"> | number
    keyword?: StringNullableFilter<"QuestionKeyword"> | string | null
    created_at?: DateTimeNullableFilter<"QuestionKeyword"> | Date | string | null
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }

  export type QuestionKeywordOrderByWithRelationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    keyword?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    faq?: FaqOrderByWithRelationInput
  }

  export type QuestionKeywordWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionKeywordWhereInput | QuestionKeywordWhereInput[]
    OR?: QuestionKeywordWhereInput[]
    NOT?: QuestionKeywordWhereInput | QuestionKeywordWhereInput[]
    faq_id?: IntFilter<"QuestionKeyword"> | number
    keyword?: StringNullableFilter<"QuestionKeyword"> | string | null
    created_at?: DateTimeNullableFilter<"QuestionKeyword"> | Date | string | null
    faq?: XOR<FaqScalarRelationFilter, FaqWhereInput>
  }, "id">

  export type QuestionKeywordOrderByWithAggregationInput = {
    id?: SortOrder
    faq_id?: SortOrder
    keyword?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: QuestionKeywordCountOrderByAggregateInput
    _avg?: QuestionKeywordAvgOrderByAggregateInput
    _max?: QuestionKeywordMaxOrderByAggregateInput
    _min?: QuestionKeywordMinOrderByAggregateInput
    _sum?: QuestionKeywordSumOrderByAggregateInput
  }

  export type QuestionKeywordScalarWhereWithAggregatesInput = {
    AND?: QuestionKeywordScalarWhereWithAggregatesInput | QuestionKeywordScalarWhereWithAggregatesInput[]
    OR?: QuestionKeywordScalarWhereWithAggregatesInput[]
    NOT?: QuestionKeywordScalarWhereWithAggregatesInput | QuestionKeywordScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"QuestionKeyword"> | number
    faq_id?: IntWithAggregatesFilter<"QuestionKeyword"> | number
    keyword?: StringNullableWithAggregatesFilter<"QuestionKeyword"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"QuestionKeyword"> | Date | string | null
  }

  export type GreetingWhereInput = {
    AND?: GreetingWhereInput | GreetingWhereInput[]
    OR?: GreetingWhereInput[]
    NOT?: GreetingWhereInput | GreetingWhereInput[]
    id?: IntFilter<"Greeting"> | number
    message?: StringNullableFilter<"Greeting"> | string | null
  }

  export type GreetingOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
  }

  export type GreetingWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GreetingWhereInput | GreetingWhereInput[]
    OR?: GreetingWhereInput[]
    NOT?: GreetingWhereInput | GreetingWhereInput[]
    message?: StringNullableFilter<"Greeting"> | string | null
  }, "id">

  export type GreetingOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrderInput | SortOrder
    _count?: GreetingCountOrderByAggregateInput
    _avg?: GreetingAvgOrderByAggregateInput
    _max?: GreetingMaxOrderByAggregateInput
    _min?: GreetingMinOrderByAggregateInput
    _sum?: GreetingSumOrderByAggregateInput
  }

  export type GreetingScalarWhereWithAggregatesInput = {
    AND?: GreetingScalarWhereWithAggregatesInput | GreetingScalarWhereWithAggregatesInput[]
    OR?: GreetingScalarWhereWithAggregatesInput[]
    NOT?: GreetingScalarWhereWithAggregatesInput | GreetingScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Greeting"> | number
    message?: StringNullableWithAggregatesFilter<"Greeting"> | string | null
  }

  export type SchoolDetailWhereInput = {
    AND?: SchoolDetailWhereInput | SchoolDetailWhereInput[]
    OR?: SchoolDetailWhereInput[]
    NOT?: SchoolDetailWhereInput | SchoolDetailWhereInput[]
    id?: IntFilter<"SchoolDetail"> | number
    name?: StringNullableFilter<"SchoolDetail"> | string | null
    small_details?: StringNullableFilter<"SchoolDetail"> | string | null
    year_built?: IntNullableFilter<"SchoolDetail"> | number | null
    history?: StringNullableFilter<"SchoolDetail"> | string | null
    vision?: StringNullableFilter<"SchoolDetail"> | string | null
    mission?: StringNullableFilter<"SchoolDetail"> | string | null
    address?: StringNullableFilter<"SchoolDetail"> | string | null
    accreditation?: StringNullableFilter<"SchoolDetail"> | string | null
    contacts?: ContactListRelationFilter
    school_faqs?: SchoolFaqListRelationFilter
  }

  export type SchoolDetailOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    small_details?: SortOrderInput | SortOrder
    year_built?: SortOrderInput | SortOrder
    history?: SortOrderInput | SortOrder
    vision?: SortOrderInput | SortOrder
    mission?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    accreditation?: SortOrderInput | SortOrder
    contacts?: ContactOrderByRelationAggregateInput
    school_faqs?: SchoolFaqOrderByRelationAggregateInput
  }

  export type SchoolDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolDetailWhereInput | SchoolDetailWhereInput[]
    OR?: SchoolDetailWhereInput[]
    NOT?: SchoolDetailWhereInput | SchoolDetailWhereInput[]
    name?: StringNullableFilter<"SchoolDetail"> | string | null
    small_details?: StringNullableFilter<"SchoolDetail"> | string | null
    year_built?: IntNullableFilter<"SchoolDetail"> | number | null
    history?: StringNullableFilter<"SchoolDetail"> | string | null
    vision?: StringNullableFilter<"SchoolDetail"> | string | null
    mission?: StringNullableFilter<"SchoolDetail"> | string | null
    address?: StringNullableFilter<"SchoolDetail"> | string | null
    accreditation?: StringNullableFilter<"SchoolDetail"> | string | null
    contacts?: ContactListRelationFilter
    school_faqs?: SchoolFaqListRelationFilter
  }, "id">

  export type SchoolDetailOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    small_details?: SortOrderInput | SortOrder
    year_built?: SortOrderInput | SortOrder
    history?: SortOrderInput | SortOrder
    vision?: SortOrderInput | SortOrder
    mission?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    accreditation?: SortOrderInput | SortOrder
    _count?: SchoolDetailCountOrderByAggregateInput
    _avg?: SchoolDetailAvgOrderByAggregateInput
    _max?: SchoolDetailMaxOrderByAggregateInput
    _min?: SchoolDetailMinOrderByAggregateInput
    _sum?: SchoolDetailSumOrderByAggregateInput
  }

  export type SchoolDetailScalarWhereWithAggregatesInput = {
    AND?: SchoolDetailScalarWhereWithAggregatesInput | SchoolDetailScalarWhereWithAggregatesInput[]
    OR?: SchoolDetailScalarWhereWithAggregatesInput[]
    NOT?: SchoolDetailScalarWhereWithAggregatesInput | SchoolDetailScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchoolDetail"> | number
    name?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    small_details?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    year_built?: IntNullableWithAggregatesFilter<"SchoolDetail"> | number | null
    history?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    vision?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    mission?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    address?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
    accreditation?: StringNullableWithAggregatesFilter<"SchoolDetail"> | string | null
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: IntFilter<"Contact"> | number
    school_detail_id?: IntFilter<"Contact"> | number
    info?: StringNullableFilter<"Contact"> | string | null
    website?: StringNullableFilter<"Contact"> | string | null
    number?: StringNullableFilter<"Contact"> | string | null
    school_detail?: XOR<SchoolDetailScalarRelationFilter, SchoolDetailWhereInput>
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    info?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    school_detail?: SchoolDetailOrderByWithRelationInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    school_detail_id?: IntFilter<"Contact"> | number
    info?: StringNullableFilter<"Contact"> | string | null
    website?: StringNullableFilter<"Contact"> | string | null
    number?: StringNullableFilter<"Contact"> | string | null
    school_detail?: XOR<SchoolDetailScalarRelationFilter, SchoolDetailWhereInput>
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    info?: SortOrderInput | SortOrder
    website?: SortOrderInput | SortOrder
    number?: SortOrderInput | SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Contact"> | number
    school_detail_id?: IntWithAggregatesFilter<"Contact"> | number
    info?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    website?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    number?: StringNullableWithAggregatesFilter<"Contact"> | string | null
  }

  export type SchoolFaqWhereInput = {
    AND?: SchoolFaqWhereInput | SchoolFaqWhereInput[]
    OR?: SchoolFaqWhereInput[]
    NOT?: SchoolFaqWhereInput | SchoolFaqWhereInput[]
    id?: IntFilter<"SchoolFaq"> | number
    school_detail_id?: IntFilter<"SchoolFaq"> | number
    question?: StringNullableFilter<"SchoolFaq"> | string | null
    answer?: StringNullableFilter<"SchoolFaq"> | string | null
    category?: StringNullableFilter<"SchoolFaq"> | string | null
    priority?: IntNullableFilter<"SchoolFaq"> | number | null
    view_count?: IntNullableFilter<"SchoolFaq"> | number | null
    is_active?: BoolNullableFilter<"SchoolFaq"> | boolean | null
    created_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
    school_detail?: XOR<SchoolDetailScalarRelationFilter, SchoolDetailWhereInput>
  }

  export type SchoolFaqOrderByWithRelationInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    question?: SortOrderInput | SortOrder
    answer?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    view_count?: SortOrderInput | SortOrder
    is_active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    school_detail?: SchoolDetailOrderByWithRelationInput
  }

  export type SchoolFaqWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SchoolFaqWhereInput | SchoolFaqWhereInput[]
    OR?: SchoolFaqWhereInput[]
    NOT?: SchoolFaqWhereInput | SchoolFaqWhereInput[]
    school_detail_id?: IntFilter<"SchoolFaq"> | number
    question?: StringNullableFilter<"SchoolFaq"> | string | null
    answer?: StringNullableFilter<"SchoolFaq"> | string | null
    category?: StringNullableFilter<"SchoolFaq"> | string | null
    priority?: IntNullableFilter<"SchoolFaq"> | number | null
    view_count?: IntNullableFilter<"SchoolFaq"> | number | null
    is_active?: BoolNullableFilter<"SchoolFaq"> | boolean | null
    created_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
    school_detail?: XOR<SchoolDetailScalarRelationFilter, SchoolDetailWhereInput>
  }, "id">

  export type SchoolFaqOrderByWithAggregationInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    question?: SortOrderInput | SortOrder
    answer?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    priority?: SortOrderInput | SortOrder
    view_count?: SortOrderInput | SortOrder
    is_active?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: SchoolFaqCountOrderByAggregateInput
    _avg?: SchoolFaqAvgOrderByAggregateInput
    _max?: SchoolFaqMaxOrderByAggregateInput
    _min?: SchoolFaqMinOrderByAggregateInput
    _sum?: SchoolFaqSumOrderByAggregateInput
  }

  export type SchoolFaqScalarWhereWithAggregatesInput = {
    AND?: SchoolFaqScalarWhereWithAggregatesInput | SchoolFaqScalarWhereWithAggregatesInput[]
    OR?: SchoolFaqScalarWhereWithAggregatesInput[]
    NOT?: SchoolFaqScalarWhereWithAggregatesInput | SchoolFaqScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SchoolFaq"> | number
    school_detail_id?: IntWithAggregatesFilter<"SchoolFaq"> | number
    question?: StringNullableWithAggregatesFilter<"SchoolFaq"> | string | null
    answer?: StringNullableWithAggregatesFilter<"SchoolFaq"> | string | null
    category?: StringNullableWithAggregatesFilter<"SchoolFaq"> | string | null
    priority?: IntNullableWithAggregatesFilter<"SchoolFaq"> | number | null
    view_count?: IntNullableWithAggregatesFilter<"SchoolFaq"> | number | null
    is_active?: BoolNullableWithAggregatesFilter<"SchoolFaq"> | boolean | null
    created_at?: DateTimeNullableWithAggregatesFilter<"SchoolFaq"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"SchoolFaq"> | Date | string | null
  }

  export type UserCreateInput = {
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionCreateNestedManyWithoutUserInput
    queries?: QueryCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionUncheckedCreateNestedManyWithoutUserInput
    queries?: QueryUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUpdateManyWithoutUserNestedInput
    queries?: QueryUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUncheckedUpdateManyWithoutUserNestedInput
    queries?: QueryUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    created_at?: Date | string
    last_active?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QueryCreateInput = {
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutQueriesInput
    session: ChatbotSessionCreateNestedOneWithoutQueriesInput
    feedback?: FeedbackCreateNestedManyWithoutQueryInput
  }

  export type QueryUncheckedCreateInput = {
    id?: number
    user_id: number
    chatbot_session_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    feedback?: FeedbackUncheckedCreateNestedManyWithoutQueryInput
  }

  export type QueryUpdateInput = {
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutQueriesNestedInput
    session?: ChatbotSessionUpdateOneRequiredWithoutQueriesNestedInput
    feedback?: FeedbackUpdateManyWithoutQueryNestedInput
  }

  export type QueryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_session_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    feedback?: FeedbackUncheckedUpdateManyWithoutQueryNestedInput
  }

  export type QueryCreateManyInput = {
    id?: number
    user_id: number
    chatbot_session_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
  }

  export type QueryUpdateManyMutationInput = {
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QueryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_session_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ChatbotSessionCreateInput = {
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
    user: UserCreateNestedOneWithoutSessionsInput
    queries?: QueryCreateNestedManyWithoutSessionInput
  }

  export type ChatbotSessionUncheckedCreateInput = {
    id?: number
    user_id: number
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
    queries?: QueryUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatbotSessionUpdateInput = {
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
    queries?: QueryUpdateManyWithoutSessionNestedInput
  }

  export type ChatbotSessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
    queries?: QueryUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatbotSessionCreateManyInput = {
    id?: number
    user_id: number
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
  }

  export type ChatbotSessionUpdateManyMutationInput = {
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ChatbotSessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackCreateInput = {
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
    query: QueryCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: number
    query_id: number
    user_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type FeedbackUpdateInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    query?: QueryUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    query_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: number
    query_id: number
    user_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    query_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeacherCreateInput = {
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
    department: DepartmentCreateNestedOneWithoutTeachersInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: number
    department_id: number
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
  }

  export type TeacherUpdateInput = {
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherCreateManyInput = {
    id?: number
    department_id: number
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
  }

  export type TeacherUpdateManyMutationInput = {
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentCreateInput = {
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
    faqs?: FaqCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: number
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
    faqs?: FaqUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: number
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseCreateInput = {
    name?: string | null
    total_course?: number | null
    department: DepartmentCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    department_id: number
    name?: string | null
    total_course?: number | null
  }

  export type CourseUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
    department?: DepartmentUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseCreateManyInput = {
    id?: number
    department_id: number
    name?: string | null
    total_course?: number | null
  }

  export type CourseUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqCreateInput = {
    question?: string | null
    answer?: string | null
    category?: string | null
    department: DepartmentCreateNestedOneWithoutFaqsInput
    keywords?: QuestionKeywordCreateNestedManyWithoutFaqInput
  }

  export type FaqUncheckedCreateInput = {
    id?: number
    department_id: number
    question?: string | null
    answer?: string | null
    category?: string | null
    keywords?: QuestionKeywordUncheckedCreateNestedManyWithoutFaqInput
  }

  export type FaqUpdateInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutFaqsNestedInput
    keywords?: QuestionKeywordUpdateManyWithoutFaqNestedInput
  }

  export type FaqUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: QuestionKeywordUncheckedUpdateManyWithoutFaqNestedInput
  }

  export type FaqCreateManyInput = {
    id?: number
    department_id: number
    question?: string | null
    answer?: string | null
    category?: string | null
  }

  export type FaqUpdateManyMutationInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FaqUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionKeywordCreateInput = {
    keyword?: string | null
    created_at?: Date | string | null
    faq: FaqCreateNestedOneWithoutKeywordsInput
  }

  export type QuestionKeywordUncheckedCreateInput = {
    id?: number
    faq_id: number
    keyword?: string | null
    created_at?: Date | string | null
  }

  export type QuestionKeywordUpdateInput = {
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    faq?: FaqUpdateOneRequiredWithoutKeywordsNestedInput
  }

  export type QuestionKeywordUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionKeywordCreateManyInput = {
    id?: number
    faq_id: number
    keyword?: string | null
    created_at?: Date | string | null
  }

  export type QuestionKeywordUpdateManyMutationInput = {
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionKeywordUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    faq_id?: IntFieldUpdateOperationsInput | number
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type GreetingCreateInput = {
    message?: string | null
  }

  export type GreetingUncheckedCreateInput = {
    id?: number
    message?: string | null
  }

  export type GreetingUpdateInput = {
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GreetingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GreetingCreateManyInput = {
    id?: number
    message?: string | null
  }

  export type GreetingUpdateManyMutationInput = {
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GreetingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolDetailCreateInput = {
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    contacts?: ContactCreateNestedManyWithoutSchool_detailInput
    school_faqs?: SchoolFaqCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailUncheckedCreateInput = {
    id?: number
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    contacts?: ContactUncheckedCreateNestedManyWithoutSchool_detailInput
    school_faqs?: SchoolFaqUncheckedCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUpdateManyWithoutSchool_detailNestedInput
    school_faqs?: SchoolFaqUpdateManyWithoutSchool_detailNestedInput
  }

  export type SchoolDetailUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUncheckedUpdateManyWithoutSchool_detailNestedInput
    school_faqs?: SchoolFaqUncheckedUpdateManyWithoutSchool_detailNestedInput
  }

  export type SchoolDetailCreateManyInput = {
    id?: number
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
  }

  export type SchoolDetailUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolDetailUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateInput = {
    info?: string | null
    website?: string | null
    number?: string | null
    school_detail: SchoolDetailCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateInput = {
    id?: number
    school_detail_id: number
    info?: string | null
    website?: string | null
    number?: string | null
  }

  export type ContactUpdateInput = {
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
    school_detail?: SchoolDetailUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    school_detail_id?: IntFieldUpdateOperationsInput | number
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateManyInput = {
    id?: number
    school_detail_id: number
    info?: string | null
    website?: string | null
    number?: string | null
  }

  export type ContactUpdateManyMutationInput = {
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    school_detail_id?: IntFieldUpdateOperationsInput | number
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolFaqCreateInput = {
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    school_detail: SchoolDetailCreateNestedOneWithoutSchool_faqsInput
  }

  export type SchoolFaqUncheckedCreateInput = {
    id?: number
    school_detail_id: number
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SchoolFaqUpdateInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    school_detail?: SchoolDetailUpdateOneRequiredWithoutSchool_faqsNestedInput
  }

  export type SchoolFaqUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    school_detail_id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolFaqCreateManyInput = {
    id?: number
    school_detail_id: number
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SchoolFaqUpdateManyMutationInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolFaqUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    school_detail_id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ChatbotSessionListRelationFilter = {
    every?: ChatbotSessionWhereInput
    some?: ChatbotSessionWhereInput
    none?: ChatbotSessionWhereInput
  }

  export type QueryListRelationFilter = {
    every?: QueryWhereInput
    some?: QueryWhereInput
    none?: QueryWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ChatbotSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QueryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    last_active?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    last_active?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    last_active?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ChatbotSessionScalarRelationFilter = {
    is?: ChatbotSessionWhereInput
    isNot?: ChatbotSessionWhereInput
  }

  export type QueryCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
    query_text?: SortOrder
    users_data_inputed?: SortOrder
    chatbot_response?: SortOrder
    created_at?: SortOrder
  }

  export type QueryAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
  }

  export type QueryMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
    query_text?: SortOrder
    created_at?: SortOrder
  }

  export type QueryMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
    query_text?: SortOrder
    created_at?: SortOrder
  }

  export type QuerySumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_session_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ChatbotSessionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_response?: SortOrder
    response_time?: SortOrder
    total_queries?: SortOrder
  }

  export type ChatbotSessionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_queries?: SortOrder
  }

  export type ChatbotSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_response?: SortOrder
    response_time?: SortOrder
    total_queries?: SortOrder
  }

  export type ChatbotSessionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    chatbot_response?: SortOrder
    response_time?: SortOrder
    total_queries?: SortOrder
  }

  export type ChatbotSessionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    total_queries?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type QueryScalarRelationFilter = {
    is?: QueryWhereInput
    isNot?: QueryWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    resolved_issue?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    resolved_issue?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    resolved_issue?: SortOrder
    created_at?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    id?: SortOrder
    query_id?: SortOrder
    user_id?: SortOrder
    rating?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    employee_name?: SortOrder
    teachers_details?: SortOrder
    office_location?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    employee_name?: SortOrder
    teachers_details?: SortOrder
    office_location?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    employee_name?: SortOrder
    teachers_details?: SortOrder
    office_location?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type FaqListRelationFilter = {
    every?: FaqWhereInput
    some?: FaqWhereInput
    none?: FaqWhereInput
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaqOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tuition_fee?: SortOrder
    head_name?: SortOrder
    description?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    career_path?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    tuition_fee?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tuition_fee?: SortOrder
    head_name?: SortOrder
    description?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    career_path?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    tuition_fee?: SortOrder
    head_name?: SortOrder
    description?: SortOrder
    building?: SortOrder
    floor?: SortOrder
    career_path?: SortOrder
    created_at?: SortOrder
  }

  export type DepartmentSumOrderByAggregateInput = {
    id?: SortOrder
    tuition_fee?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    name?: SortOrder
    total_course?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    total_course?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    name?: SortOrder
    total_course?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    name?: SortOrder
    total_course?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    total_course?: SortOrder
  }

  export type QuestionKeywordListRelationFilter = {
    every?: QuestionKeywordWhereInput
    some?: QuestionKeywordWhereInput
    none?: QuestionKeywordWhereInput
  }

  export type QuestionKeywordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FaqCountOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
  }

  export type FaqAvgOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type FaqMaxOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
  }

  export type FaqMinOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
  }

  export type FaqSumOrderByAggregateInput = {
    id?: SortOrder
    department_id?: SortOrder
  }

  export type FaqScalarRelationFilter = {
    is?: FaqWhereInput
    isNot?: FaqWhereInput
  }

  export type QuestionKeywordCountOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    keyword?: SortOrder
    created_at?: SortOrder
  }

  export type QuestionKeywordAvgOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
  }

  export type QuestionKeywordMaxOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    keyword?: SortOrder
    created_at?: SortOrder
  }

  export type QuestionKeywordMinOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
    keyword?: SortOrder
    created_at?: SortOrder
  }

  export type QuestionKeywordSumOrderByAggregateInput = {
    id?: SortOrder
    faq_id?: SortOrder
  }

  export type GreetingCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
  }

  export type GreetingAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GreetingMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
  }

  export type GreetingMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
  }

  export type GreetingSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type SchoolFaqListRelationFilter = {
    every?: SchoolFaqWhereInput
    some?: SchoolFaqWhereInput
    none?: SchoolFaqWhereInput
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolFaqOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SchoolDetailCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    small_details?: SortOrder
    year_built?: SortOrder
    history?: SortOrder
    vision?: SortOrder
    mission?: SortOrder
    address?: SortOrder
    accreditation?: SortOrder
  }

  export type SchoolDetailAvgOrderByAggregateInput = {
    id?: SortOrder
    year_built?: SortOrder
  }

  export type SchoolDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    small_details?: SortOrder
    year_built?: SortOrder
    history?: SortOrder
    vision?: SortOrder
    mission?: SortOrder
    address?: SortOrder
    accreditation?: SortOrder
  }

  export type SchoolDetailMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    small_details?: SortOrder
    year_built?: SortOrder
    history?: SortOrder
    vision?: SortOrder
    mission?: SortOrder
    address?: SortOrder
    accreditation?: SortOrder
  }

  export type SchoolDetailSumOrderByAggregateInput = {
    id?: SortOrder
    year_built?: SortOrder
  }

  export type SchoolDetailScalarRelationFilter = {
    is?: SchoolDetailWhereInput
    isNot?: SchoolDetailWhereInput
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    info?: SortOrder
    website?: SortOrder
    number?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    info?: SortOrder
    website?: SortOrder
    number?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    info?: SortOrder
    website?: SortOrder
    number?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
  }

  export type SchoolFaqCountOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    view_count?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SchoolFaqAvgOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    priority?: SortOrder
    view_count?: SortOrder
  }

  export type SchoolFaqMaxOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    view_count?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SchoolFaqMinOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    question?: SortOrder
    answer?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    view_count?: SortOrder
    is_active?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SchoolFaqSumOrderByAggregateInput = {
    id?: SortOrder
    school_detail_id?: SortOrder
    priority?: SortOrder
    view_count?: SortOrder
  }

  export type ChatbotSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput> | ChatbotSessionCreateWithoutUserInput[] | ChatbotSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutUserInput | ChatbotSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatbotSessionCreateManyUserInputEnvelope
    connect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
  }

  export type QueryCreateNestedManyWithoutUserInput = {
    create?: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput> | QueryCreateWithoutUserInput[] | QueryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutUserInput | QueryCreateOrConnectWithoutUserInput[]
    createMany?: QueryCreateManyUserInputEnvelope
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ChatbotSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput> | ChatbotSessionCreateWithoutUserInput[] | ChatbotSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutUserInput | ChatbotSessionCreateOrConnectWithoutUserInput[]
    createMany?: ChatbotSessionCreateManyUserInputEnvelope
    connect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
  }

  export type QueryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput> | QueryCreateWithoutUserInput[] | QueryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutUserInput | QueryCreateOrConnectWithoutUserInput[]
    createMany?: QueryCreateManyUserInputEnvelope
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ChatbotSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput> | ChatbotSessionCreateWithoutUserInput[] | ChatbotSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutUserInput | ChatbotSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatbotSessionUpsertWithWhereUniqueWithoutUserInput | ChatbotSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatbotSessionCreateManyUserInputEnvelope
    set?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    disconnect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    delete?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    connect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    update?: ChatbotSessionUpdateWithWhereUniqueWithoutUserInput | ChatbotSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatbotSessionUpdateManyWithWhereWithoutUserInput | ChatbotSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatbotSessionScalarWhereInput | ChatbotSessionScalarWhereInput[]
  }

  export type QueryUpdateManyWithoutUserNestedInput = {
    create?: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput> | QueryCreateWithoutUserInput[] | QueryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutUserInput | QueryCreateOrConnectWithoutUserInput[]
    upsert?: QueryUpsertWithWhereUniqueWithoutUserInput | QueryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QueryCreateManyUserInputEnvelope
    set?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    disconnect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    delete?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    update?: QueryUpdateWithWhereUniqueWithoutUserInput | QueryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QueryUpdateManyWithWhereWithoutUserInput | QueryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QueryScalarWhereInput | QueryScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ChatbotSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput> | ChatbotSessionCreateWithoutUserInput[] | ChatbotSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutUserInput | ChatbotSessionCreateOrConnectWithoutUserInput[]
    upsert?: ChatbotSessionUpsertWithWhereUniqueWithoutUserInput | ChatbotSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ChatbotSessionCreateManyUserInputEnvelope
    set?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    disconnect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    delete?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    connect?: ChatbotSessionWhereUniqueInput | ChatbotSessionWhereUniqueInput[]
    update?: ChatbotSessionUpdateWithWhereUniqueWithoutUserInput | ChatbotSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ChatbotSessionUpdateManyWithWhereWithoutUserInput | ChatbotSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ChatbotSessionScalarWhereInput | ChatbotSessionScalarWhereInput[]
  }

  export type QueryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput> | QueryCreateWithoutUserInput[] | QueryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutUserInput | QueryCreateOrConnectWithoutUserInput[]
    upsert?: QueryUpsertWithWhereUniqueWithoutUserInput | QueryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: QueryCreateManyUserInputEnvelope
    set?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    disconnect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    delete?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    update?: QueryUpdateWithWhereUniqueWithoutUserInput | QueryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: QueryUpdateManyWithWhereWithoutUserInput | QueryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: QueryScalarWhereInput | QueryScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type QueryCreateusers_data_inputedInput = {
    set: string[]
  }

  export type QueryCreatechatbot_responseInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutQueriesInput = {
    create?: XOR<UserCreateWithoutQueriesInput, UserUncheckedCreateWithoutQueriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueriesInput
    connect?: UserWhereUniqueInput
  }

  export type ChatbotSessionCreateNestedOneWithoutQueriesInput = {
    create?: XOR<ChatbotSessionCreateWithoutQueriesInput, ChatbotSessionUncheckedCreateWithoutQueriesInput>
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutQueriesInput
    connect?: ChatbotSessionWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutQueryInput = {
    create?: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput> | FeedbackCreateWithoutQueryInput[] | FeedbackUncheckedCreateWithoutQueryInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutQueryInput | FeedbackCreateOrConnectWithoutQueryInput[]
    createMany?: FeedbackCreateManyQueryInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutQueryInput = {
    create?: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput> | FeedbackCreateWithoutQueryInput[] | FeedbackUncheckedCreateWithoutQueryInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutQueryInput | FeedbackCreateOrConnectWithoutQueryInput[]
    createMany?: FeedbackCreateManyQueryInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type QueryUpdateusers_data_inputedInput = {
    set?: string[]
    push?: string | string[]
  }

  export type QueryUpdatechatbot_responseInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutQueriesNestedInput = {
    create?: XOR<UserCreateWithoutQueriesInput, UserUncheckedCreateWithoutQueriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueriesInput
    upsert?: UserUpsertWithoutQueriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQueriesInput, UserUpdateWithoutQueriesInput>, UserUncheckedUpdateWithoutQueriesInput>
  }

  export type ChatbotSessionUpdateOneRequiredWithoutQueriesNestedInput = {
    create?: XOR<ChatbotSessionCreateWithoutQueriesInput, ChatbotSessionUncheckedCreateWithoutQueriesInput>
    connectOrCreate?: ChatbotSessionCreateOrConnectWithoutQueriesInput
    upsert?: ChatbotSessionUpsertWithoutQueriesInput
    connect?: ChatbotSessionWhereUniqueInput
    update?: XOR<XOR<ChatbotSessionUpdateToOneWithWhereWithoutQueriesInput, ChatbotSessionUpdateWithoutQueriesInput>, ChatbotSessionUncheckedUpdateWithoutQueriesInput>
  }

  export type FeedbackUpdateManyWithoutQueryNestedInput = {
    create?: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput> | FeedbackCreateWithoutQueryInput[] | FeedbackUncheckedCreateWithoutQueryInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutQueryInput | FeedbackCreateOrConnectWithoutQueryInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutQueryInput | FeedbackUpsertWithWhereUniqueWithoutQueryInput[]
    createMany?: FeedbackCreateManyQueryInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutQueryInput | FeedbackUpdateWithWhereUniqueWithoutQueryInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutQueryInput | FeedbackUpdateManyWithWhereWithoutQueryInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutQueryNestedInput = {
    create?: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput> | FeedbackCreateWithoutQueryInput[] | FeedbackUncheckedCreateWithoutQueryInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutQueryInput | FeedbackCreateOrConnectWithoutQueryInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutQueryInput | FeedbackUpsertWithWhereUniqueWithoutQueryInput[]
    createMany?: FeedbackCreateManyQueryInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutQueryInput | FeedbackUpdateWithWhereUniqueWithoutQueryInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutQueryInput | FeedbackUpdateManyWithWhereWithoutQueryInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type QueryCreateNestedManyWithoutSessionInput = {
    create?: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput> | QueryCreateWithoutSessionInput[] | QueryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutSessionInput | QueryCreateOrConnectWithoutSessionInput[]
    createMany?: QueryCreateManySessionInputEnvelope
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
  }

  export type QueryUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput> | QueryCreateWithoutSessionInput[] | QueryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutSessionInput | QueryCreateOrConnectWithoutSessionInput[]
    createMany?: QueryCreateManySessionInputEnvelope
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type QueryUpdateManyWithoutSessionNestedInput = {
    create?: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput> | QueryCreateWithoutSessionInput[] | QueryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutSessionInput | QueryCreateOrConnectWithoutSessionInput[]
    upsert?: QueryUpsertWithWhereUniqueWithoutSessionInput | QueryUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: QueryCreateManySessionInputEnvelope
    set?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    disconnect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    delete?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    update?: QueryUpdateWithWhereUniqueWithoutSessionInput | QueryUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: QueryUpdateManyWithWhereWithoutSessionInput | QueryUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: QueryScalarWhereInput | QueryScalarWhereInput[]
  }

  export type QueryUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput> | QueryCreateWithoutSessionInput[] | QueryUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: QueryCreateOrConnectWithoutSessionInput | QueryCreateOrConnectWithoutSessionInput[]
    upsert?: QueryUpsertWithWhereUniqueWithoutSessionInput | QueryUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: QueryCreateManySessionInputEnvelope
    set?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    disconnect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    delete?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    connect?: QueryWhereUniqueInput | QueryWhereUniqueInput[]
    update?: QueryUpdateWithWhereUniqueWithoutSessionInput | QueryUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: QueryUpdateManyWithWhereWithoutSessionInput | QueryUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: QueryScalarWhereInput | QueryScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type QueryCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<QueryCreateWithoutFeedbackInput, QueryUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: QueryCreateOrConnectWithoutFeedbackInput
    connect?: QueryWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type QueryUpdateOneRequiredWithoutFeedbackNestedInput = {
    create?: XOR<QueryCreateWithoutFeedbackInput, QueryUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: QueryCreateOrConnectWithoutFeedbackInput
    upsert?: QueryUpsertWithoutFeedbackInput
    connect?: QueryWhereUniqueInput
    update?: XOR<XOR<QueryUpdateToOneWithWhereWithoutFeedbackInput, QueryUpdateWithoutFeedbackInput>, QueryUncheckedUpdateWithoutFeedbackInput>
  }

  export type DepartmentCreateNestedOneWithoutTeachersInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutTeachersInput
    upsert?: DepartmentUpsertWithoutTeachersInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutTeachersInput, DepartmentUpdateWithoutTeachersInput>, DepartmentUncheckedUpdateWithoutTeachersInput>
  }

  export type TeacherCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type FaqCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput> | FaqCreateWithoutDepartmentInput[] | FaqUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: FaqCreateOrConnectWithoutDepartmentInput | FaqCreateOrConnectWithoutDepartmentInput[]
    createMany?: FaqCreateManyDepartmentInputEnvelope
    connect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type FaqUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput> | FaqCreateWithoutDepartmentInput[] | FaqUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: FaqCreateOrConnectWithoutDepartmentInput | FaqCreateOrConnectWithoutDepartmentInput[]
    createMany?: FaqCreateManyDepartmentInputEnvelope
    connect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type TeacherUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type FaqUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput> | FaqCreateWithoutDepartmentInput[] | FaqUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: FaqCreateOrConnectWithoutDepartmentInput | FaqCreateOrConnectWithoutDepartmentInput[]
    upsert?: FaqUpsertWithWhereUniqueWithoutDepartmentInput | FaqUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: FaqCreateManyDepartmentInputEnvelope
    set?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    disconnect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    delete?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    connect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    update?: FaqUpdateWithWhereUniqueWithoutDepartmentInput | FaqUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: FaqUpdateManyWithWhereWithoutDepartmentInput | FaqUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: FaqScalarWhereInput | FaqScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput> | TeacherCreateWithoutDepartmentInput[] | TeacherUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutDepartmentInput | TeacherCreateOrConnectWithoutDepartmentInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutDepartmentInput | TeacherUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: TeacherCreateManyDepartmentInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutDepartmentInput | TeacherUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutDepartmentInput | TeacherUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput> | CourseCreateWithoutDepartmentInput[] | CourseUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutDepartmentInput | CourseCreateOrConnectWithoutDepartmentInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutDepartmentInput | CourseUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: CourseCreateManyDepartmentInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutDepartmentInput | CourseUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutDepartmentInput | CourseUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type FaqUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput> | FaqCreateWithoutDepartmentInput[] | FaqUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: FaqCreateOrConnectWithoutDepartmentInput | FaqCreateOrConnectWithoutDepartmentInput[]
    upsert?: FaqUpsertWithWhereUniqueWithoutDepartmentInput | FaqUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: FaqCreateManyDepartmentInputEnvelope
    set?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    disconnect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    delete?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    connect?: FaqWhereUniqueInput | FaqWhereUniqueInput[]
    update?: FaqUpdateWithWhereUniqueWithoutDepartmentInput | FaqUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: FaqUpdateManyWithWhereWithoutDepartmentInput | FaqUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: FaqScalarWhereInput | FaqScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutCoursesInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
  }

  export type DepartmentUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutCoursesInput
    upsert?: DepartmentUpsertWithoutCoursesInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutCoursesInput, DepartmentUpdateWithoutCoursesInput>, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type DepartmentCreateNestedOneWithoutFaqsInput = {
    create?: XOR<DepartmentCreateWithoutFaqsInput, DepartmentUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutFaqsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type QuestionKeywordCreateNestedManyWithoutFaqInput = {
    create?: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput> | QuestionKeywordCreateWithoutFaqInput[] | QuestionKeywordUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: QuestionKeywordCreateOrConnectWithoutFaqInput | QuestionKeywordCreateOrConnectWithoutFaqInput[]
    createMany?: QuestionKeywordCreateManyFaqInputEnvelope
    connect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
  }

  export type QuestionKeywordUncheckedCreateNestedManyWithoutFaqInput = {
    create?: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput> | QuestionKeywordCreateWithoutFaqInput[] | QuestionKeywordUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: QuestionKeywordCreateOrConnectWithoutFaqInput | QuestionKeywordCreateOrConnectWithoutFaqInput[]
    createMany?: QuestionKeywordCreateManyFaqInputEnvelope
    connect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
  }

  export type DepartmentUpdateOneRequiredWithoutFaqsNestedInput = {
    create?: XOR<DepartmentCreateWithoutFaqsInput, DepartmentUncheckedCreateWithoutFaqsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutFaqsInput
    upsert?: DepartmentUpsertWithoutFaqsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutFaqsInput, DepartmentUpdateWithoutFaqsInput>, DepartmentUncheckedUpdateWithoutFaqsInput>
  }

  export type QuestionKeywordUpdateManyWithoutFaqNestedInput = {
    create?: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput> | QuestionKeywordCreateWithoutFaqInput[] | QuestionKeywordUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: QuestionKeywordCreateOrConnectWithoutFaqInput | QuestionKeywordCreateOrConnectWithoutFaqInput[]
    upsert?: QuestionKeywordUpsertWithWhereUniqueWithoutFaqInput | QuestionKeywordUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: QuestionKeywordCreateManyFaqInputEnvelope
    set?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    disconnect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    delete?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    connect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    update?: QuestionKeywordUpdateWithWhereUniqueWithoutFaqInput | QuestionKeywordUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: QuestionKeywordUpdateManyWithWhereWithoutFaqInput | QuestionKeywordUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: QuestionKeywordScalarWhereInput | QuestionKeywordScalarWhereInput[]
  }

  export type QuestionKeywordUncheckedUpdateManyWithoutFaqNestedInput = {
    create?: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput> | QuestionKeywordCreateWithoutFaqInput[] | QuestionKeywordUncheckedCreateWithoutFaqInput[]
    connectOrCreate?: QuestionKeywordCreateOrConnectWithoutFaqInput | QuestionKeywordCreateOrConnectWithoutFaqInput[]
    upsert?: QuestionKeywordUpsertWithWhereUniqueWithoutFaqInput | QuestionKeywordUpsertWithWhereUniqueWithoutFaqInput[]
    createMany?: QuestionKeywordCreateManyFaqInputEnvelope
    set?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    disconnect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    delete?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    connect?: QuestionKeywordWhereUniqueInput | QuestionKeywordWhereUniqueInput[]
    update?: QuestionKeywordUpdateWithWhereUniqueWithoutFaqInput | QuestionKeywordUpdateWithWhereUniqueWithoutFaqInput[]
    updateMany?: QuestionKeywordUpdateManyWithWhereWithoutFaqInput | QuestionKeywordUpdateManyWithWhereWithoutFaqInput[]
    deleteMany?: QuestionKeywordScalarWhereInput | QuestionKeywordScalarWhereInput[]
  }

  export type FaqCreateNestedOneWithoutKeywordsInput = {
    create?: XOR<FaqCreateWithoutKeywordsInput, FaqUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutKeywordsInput
    connect?: FaqWhereUniqueInput
  }

  export type FaqUpdateOneRequiredWithoutKeywordsNestedInput = {
    create?: XOR<FaqCreateWithoutKeywordsInput, FaqUncheckedCreateWithoutKeywordsInput>
    connectOrCreate?: FaqCreateOrConnectWithoutKeywordsInput
    upsert?: FaqUpsertWithoutKeywordsInput
    connect?: FaqWhereUniqueInput
    update?: XOR<XOR<FaqUpdateToOneWithWhereWithoutKeywordsInput, FaqUpdateWithoutKeywordsInput>, FaqUncheckedUpdateWithoutKeywordsInput>
  }

  export type ContactCreateNestedManyWithoutSchool_detailInput = {
    create?: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput> | ContactCreateWithoutSchool_detailInput[] | ContactUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutSchool_detailInput | ContactCreateOrConnectWithoutSchool_detailInput[]
    createMany?: ContactCreateManySchool_detailInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type SchoolFaqCreateNestedManyWithoutSchool_detailInput = {
    create?: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput> | SchoolFaqCreateWithoutSchool_detailInput[] | SchoolFaqUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: SchoolFaqCreateOrConnectWithoutSchool_detailInput | SchoolFaqCreateOrConnectWithoutSchool_detailInput[]
    createMany?: SchoolFaqCreateManySchool_detailInputEnvelope
    connect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutSchool_detailInput = {
    create?: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput> | ContactCreateWithoutSchool_detailInput[] | ContactUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutSchool_detailInput | ContactCreateOrConnectWithoutSchool_detailInput[]
    createMany?: ContactCreateManySchool_detailInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type SchoolFaqUncheckedCreateNestedManyWithoutSchool_detailInput = {
    create?: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput> | SchoolFaqCreateWithoutSchool_detailInput[] | SchoolFaqUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: SchoolFaqCreateOrConnectWithoutSchool_detailInput | SchoolFaqCreateOrConnectWithoutSchool_detailInput[]
    createMany?: SchoolFaqCreateManySchool_detailInputEnvelope
    connect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
  }

  export type ContactUpdateManyWithoutSchool_detailNestedInput = {
    create?: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput> | ContactCreateWithoutSchool_detailInput[] | ContactUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutSchool_detailInput | ContactCreateOrConnectWithoutSchool_detailInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutSchool_detailInput | ContactUpsertWithWhereUniqueWithoutSchool_detailInput[]
    createMany?: ContactCreateManySchool_detailInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutSchool_detailInput | ContactUpdateWithWhereUniqueWithoutSchool_detailInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutSchool_detailInput | ContactUpdateManyWithWhereWithoutSchool_detailInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type SchoolFaqUpdateManyWithoutSchool_detailNestedInput = {
    create?: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput> | SchoolFaqCreateWithoutSchool_detailInput[] | SchoolFaqUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: SchoolFaqCreateOrConnectWithoutSchool_detailInput | SchoolFaqCreateOrConnectWithoutSchool_detailInput[]
    upsert?: SchoolFaqUpsertWithWhereUniqueWithoutSchool_detailInput | SchoolFaqUpsertWithWhereUniqueWithoutSchool_detailInput[]
    createMany?: SchoolFaqCreateManySchool_detailInputEnvelope
    set?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    disconnect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    delete?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    connect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    update?: SchoolFaqUpdateWithWhereUniqueWithoutSchool_detailInput | SchoolFaqUpdateWithWhereUniqueWithoutSchool_detailInput[]
    updateMany?: SchoolFaqUpdateManyWithWhereWithoutSchool_detailInput | SchoolFaqUpdateManyWithWhereWithoutSchool_detailInput[]
    deleteMany?: SchoolFaqScalarWhereInput | SchoolFaqScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutSchool_detailNestedInput = {
    create?: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput> | ContactCreateWithoutSchool_detailInput[] | ContactUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutSchool_detailInput | ContactCreateOrConnectWithoutSchool_detailInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutSchool_detailInput | ContactUpsertWithWhereUniqueWithoutSchool_detailInput[]
    createMany?: ContactCreateManySchool_detailInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutSchool_detailInput | ContactUpdateWithWhereUniqueWithoutSchool_detailInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutSchool_detailInput | ContactUpdateManyWithWhereWithoutSchool_detailInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type SchoolFaqUncheckedUpdateManyWithoutSchool_detailNestedInput = {
    create?: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput> | SchoolFaqCreateWithoutSchool_detailInput[] | SchoolFaqUncheckedCreateWithoutSchool_detailInput[]
    connectOrCreate?: SchoolFaqCreateOrConnectWithoutSchool_detailInput | SchoolFaqCreateOrConnectWithoutSchool_detailInput[]
    upsert?: SchoolFaqUpsertWithWhereUniqueWithoutSchool_detailInput | SchoolFaqUpsertWithWhereUniqueWithoutSchool_detailInput[]
    createMany?: SchoolFaqCreateManySchool_detailInputEnvelope
    set?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    disconnect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    delete?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    connect?: SchoolFaqWhereUniqueInput | SchoolFaqWhereUniqueInput[]
    update?: SchoolFaqUpdateWithWhereUniqueWithoutSchool_detailInput | SchoolFaqUpdateWithWhereUniqueWithoutSchool_detailInput[]
    updateMany?: SchoolFaqUpdateManyWithWhereWithoutSchool_detailInput | SchoolFaqUpdateManyWithWhereWithoutSchool_detailInput[]
    deleteMany?: SchoolFaqScalarWhereInput | SchoolFaqScalarWhereInput[]
  }

  export type SchoolDetailCreateNestedOneWithoutContactsInput = {
    create?: XOR<SchoolDetailCreateWithoutContactsInput, SchoolDetailUncheckedCreateWithoutContactsInput>
    connectOrCreate?: SchoolDetailCreateOrConnectWithoutContactsInput
    connect?: SchoolDetailWhereUniqueInput
  }

  export type SchoolDetailUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<SchoolDetailCreateWithoutContactsInput, SchoolDetailUncheckedCreateWithoutContactsInput>
    connectOrCreate?: SchoolDetailCreateOrConnectWithoutContactsInput
    upsert?: SchoolDetailUpsertWithoutContactsInput
    connect?: SchoolDetailWhereUniqueInput
    update?: XOR<XOR<SchoolDetailUpdateToOneWithWhereWithoutContactsInput, SchoolDetailUpdateWithoutContactsInput>, SchoolDetailUncheckedUpdateWithoutContactsInput>
  }

  export type SchoolDetailCreateNestedOneWithoutSchool_faqsInput = {
    create?: XOR<SchoolDetailCreateWithoutSchool_faqsInput, SchoolDetailUncheckedCreateWithoutSchool_faqsInput>
    connectOrCreate?: SchoolDetailCreateOrConnectWithoutSchool_faqsInput
    connect?: SchoolDetailWhereUniqueInput
  }

  export type SchoolDetailUpdateOneRequiredWithoutSchool_faqsNestedInput = {
    create?: XOR<SchoolDetailCreateWithoutSchool_faqsInput, SchoolDetailUncheckedCreateWithoutSchool_faqsInput>
    connectOrCreate?: SchoolDetailCreateOrConnectWithoutSchool_faqsInput
    upsert?: SchoolDetailUpsertWithoutSchool_faqsInput
    connect?: SchoolDetailWhereUniqueInput
    update?: XOR<XOR<SchoolDetailUpdateToOneWithWhereWithoutSchool_faqsInput, SchoolDetailUpdateWithoutSchool_faqsInput>, SchoolDetailUncheckedUpdateWithoutSchool_faqsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type ChatbotSessionCreateWithoutUserInput = {
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
    queries?: QueryCreateNestedManyWithoutSessionInput
  }

  export type ChatbotSessionUncheckedCreateWithoutUserInput = {
    id?: number
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
    queries?: QueryUncheckedCreateNestedManyWithoutSessionInput
  }

  export type ChatbotSessionCreateOrConnectWithoutUserInput = {
    where: ChatbotSessionWhereUniqueInput
    create: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatbotSessionCreateManyUserInputEnvelope = {
    data: ChatbotSessionCreateManyUserInput | ChatbotSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type QueryCreateWithoutUserInput = {
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    session: ChatbotSessionCreateNestedOneWithoutQueriesInput
    feedback?: FeedbackCreateNestedManyWithoutQueryInput
  }

  export type QueryUncheckedCreateWithoutUserInput = {
    id?: number
    chatbot_session_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    feedback?: FeedbackUncheckedCreateNestedManyWithoutQueryInput
  }

  export type QueryCreateOrConnectWithoutUserInput = {
    where: QueryWhereUniqueInput
    create: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput>
  }

  export type QueryCreateManyUserInputEnvelope = {
    data: QueryCreateManyUserInput | QueryCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
    query: QueryCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: number
    query_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ChatbotSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: ChatbotSessionWhereUniqueInput
    update: XOR<ChatbotSessionUpdateWithoutUserInput, ChatbotSessionUncheckedUpdateWithoutUserInput>
    create: XOR<ChatbotSessionCreateWithoutUserInput, ChatbotSessionUncheckedCreateWithoutUserInput>
  }

  export type ChatbotSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: ChatbotSessionWhereUniqueInput
    data: XOR<ChatbotSessionUpdateWithoutUserInput, ChatbotSessionUncheckedUpdateWithoutUserInput>
  }

  export type ChatbotSessionUpdateManyWithWhereWithoutUserInput = {
    where: ChatbotSessionScalarWhereInput
    data: XOR<ChatbotSessionUpdateManyMutationInput, ChatbotSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type ChatbotSessionScalarWhereInput = {
    AND?: ChatbotSessionScalarWhereInput | ChatbotSessionScalarWhereInput[]
    OR?: ChatbotSessionScalarWhereInput[]
    NOT?: ChatbotSessionScalarWhereInput | ChatbotSessionScalarWhereInput[]
    id?: IntFilter<"ChatbotSession"> | number
    user_id?: IntFilter<"ChatbotSession"> | number
    chatbot_response?: StringNullableFilter<"ChatbotSession"> | string | null
    response_time?: DateTimeNullableFilter<"ChatbotSession"> | Date | string | null
    total_queries?: IntNullableFilter<"ChatbotSession"> | number | null
  }

  export type QueryUpsertWithWhereUniqueWithoutUserInput = {
    where: QueryWhereUniqueInput
    update: XOR<QueryUpdateWithoutUserInput, QueryUncheckedUpdateWithoutUserInput>
    create: XOR<QueryCreateWithoutUserInput, QueryUncheckedCreateWithoutUserInput>
  }

  export type QueryUpdateWithWhereUniqueWithoutUserInput = {
    where: QueryWhereUniqueInput
    data: XOR<QueryUpdateWithoutUserInput, QueryUncheckedUpdateWithoutUserInput>
  }

  export type QueryUpdateManyWithWhereWithoutUserInput = {
    where: QueryScalarWhereInput
    data: XOR<QueryUpdateManyMutationInput, QueryUncheckedUpdateManyWithoutUserInput>
  }

  export type QueryScalarWhereInput = {
    AND?: QueryScalarWhereInput | QueryScalarWhereInput[]
    OR?: QueryScalarWhereInput[]
    NOT?: QueryScalarWhereInput | QueryScalarWhereInput[]
    id?: IntFilter<"Query"> | number
    user_id?: IntFilter<"Query"> | number
    chatbot_session_id?: IntFilter<"Query"> | number
    query_text?: StringNullableFilter<"Query"> | string | null
    users_data_inputed?: StringNullableListFilter<"Query">
    chatbot_response?: StringNullableListFilter<"Query">
    created_at?: DateTimeNullableFilter<"Query"> | Date | string | null
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: IntFilter<"Feedback"> | number
    query_id?: IntFilter<"Feedback"> | number
    user_id?: IntFilter<"Feedback"> | number
    rating?: IntNullableFilter<"Feedback"> | number | null
    comment?: StringNullableFilter<"Feedback"> | string | null
    resolved_issue?: BoolNullableFilter<"Feedback"> | boolean | null
    created_at?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type UserCreateWithoutQueriesInput = {
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQueriesInput = {
    id?: number
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQueriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQueriesInput, UserUncheckedCreateWithoutQueriesInput>
  }

  export type ChatbotSessionCreateWithoutQueriesInput = {
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type ChatbotSessionUncheckedCreateWithoutQueriesInput = {
    id?: number
    user_id: number
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
  }

  export type ChatbotSessionCreateOrConnectWithoutQueriesInput = {
    where: ChatbotSessionWhereUniqueInput
    create: XOR<ChatbotSessionCreateWithoutQueriesInput, ChatbotSessionUncheckedCreateWithoutQueriesInput>
  }

  export type FeedbackCreateWithoutQueryInput = {
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutQueryInput = {
    id?: number
    user_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutQueryInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput>
  }

  export type FeedbackCreateManyQueryInputEnvelope = {
    data: FeedbackCreateManyQueryInput | FeedbackCreateManyQueryInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutQueriesInput = {
    update: XOR<UserUpdateWithoutQueriesInput, UserUncheckedUpdateWithoutQueriesInput>
    create: XOR<UserCreateWithoutQueriesInput, UserUncheckedCreateWithoutQueriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQueriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQueriesInput, UserUncheckedUpdateWithoutQueriesInput>
  }

  export type UserUpdateWithoutQueriesInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQueriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ChatbotSessionUpsertWithoutQueriesInput = {
    update: XOR<ChatbotSessionUpdateWithoutQueriesInput, ChatbotSessionUncheckedUpdateWithoutQueriesInput>
    create: XOR<ChatbotSessionCreateWithoutQueriesInput, ChatbotSessionUncheckedCreateWithoutQueriesInput>
    where?: ChatbotSessionWhereInput
  }

  export type ChatbotSessionUpdateToOneWithWhereWithoutQueriesInput = {
    where?: ChatbotSessionWhereInput
    data: XOR<ChatbotSessionUpdateWithoutQueriesInput, ChatbotSessionUncheckedUpdateWithoutQueriesInput>
  }

  export type ChatbotSessionUpdateWithoutQueriesInput = {
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type ChatbotSessionUncheckedUpdateWithoutQueriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackUpsertWithWhereUniqueWithoutQueryInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutQueryInput, FeedbackUncheckedUpdateWithoutQueryInput>
    create: XOR<FeedbackCreateWithoutQueryInput, FeedbackUncheckedCreateWithoutQueryInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutQueryInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutQueryInput, FeedbackUncheckedUpdateWithoutQueryInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutQueryInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutQueryInput>
  }

  export type UserCreateWithoutSessionsInput = {
    created_at?: Date | string
    last_active?: Date | string | null
    queries?: QueryCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    created_at?: Date | string
    last_active?: Date | string | null
    queries?: QueryUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type QueryCreateWithoutSessionInput = {
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutQueriesInput
    feedback?: FeedbackCreateNestedManyWithoutQueryInput
  }

  export type QueryUncheckedCreateWithoutSessionInput = {
    id?: number
    user_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    feedback?: FeedbackUncheckedCreateNestedManyWithoutQueryInput
  }

  export type QueryCreateOrConnectWithoutSessionInput = {
    where: QueryWhereUniqueInput
    create: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput>
  }

  export type QueryCreateManySessionInputEnvelope = {
    data: QueryCreateManySessionInput | QueryCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    queries?: QueryUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    queries?: QueryUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QueryUpsertWithWhereUniqueWithoutSessionInput = {
    where: QueryWhereUniqueInput
    update: XOR<QueryUpdateWithoutSessionInput, QueryUncheckedUpdateWithoutSessionInput>
    create: XOR<QueryCreateWithoutSessionInput, QueryUncheckedCreateWithoutSessionInput>
  }

  export type QueryUpdateWithWhereUniqueWithoutSessionInput = {
    where: QueryWhereUniqueInput
    data: XOR<QueryUpdateWithoutSessionInput, QueryUncheckedUpdateWithoutSessionInput>
  }

  export type QueryUpdateManyWithWhereWithoutSessionInput = {
    where: QueryScalarWhereInput
    data: XOR<QueryUpdateManyMutationInput, QueryUncheckedUpdateManyWithoutSessionInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionCreateNestedManyWithoutUserInput
    queries?: QueryCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: number
    created_at?: Date | string
    last_active?: Date | string | null
    sessions?: ChatbotSessionUncheckedCreateNestedManyWithoutUserInput
    queries?: QueryUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type QueryCreateWithoutFeedbackInput = {
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
    user: UserCreateNestedOneWithoutQueriesInput
    session: ChatbotSessionCreateNestedOneWithoutQueriesInput
  }

  export type QueryUncheckedCreateWithoutFeedbackInput = {
    id?: number
    user_id: number
    chatbot_session_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
  }

  export type QueryCreateOrConnectWithoutFeedbackInput = {
    where: QueryWhereUniqueInput
    create: XOR<QueryCreateWithoutFeedbackInput, QueryUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUpdateManyWithoutUserNestedInput
    queries?: QueryUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    last_active?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    sessions?: ChatbotSessionUncheckedUpdateManyWithoutUserNestedInput
    queries?: QueryUncheckedUpdateManyWithoutUserNestedInput
  }

  export type QueryUpsertWithoutFeedbackInput = {
    update: XOR<QueryUpdateWithoutFeedbackInput, QueryUncheckedUpdateWithoutFeedbackInput>
    create: XOR<QueryCreateWithoutFeedbackInput, QueryUncheckedCreateWithoutFeedbackInput>
    where?: QueryWhereInput
  }

  export type QueryUpdateToOneWithWhereWithoutFeedbackInput = {
    where?: QueryWhereInput
    data: XOR<QueryUpdateWithoutFeedbackInput, QueryUncheckedUpdateWithoutFeedbackInput>
  }

  export type QueryUpdateWithoutFeedbackInput = {
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutQueriesNestedInput
    session?: ChatbotSessionUpdateOneRequiredWithoutQueriesNestedInput
  }

  export type QueryUncheckedUpdateWithoutFeedbackInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    chatbot_session_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type DepartmentCreateWithoutTeachersInput = {
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    courses?: CourseCreateNestedManyWithoutDepartmentInput
    faqs?: FaqCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutTeachersInput = {
    id?: number
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
    faqs?: FaqUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutTeachersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
  }

  export type DepartmentUpsertWithoutTeachersInput = {
    update: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
    create: XOR<DepartmentCreateWithoutTeachersInput, DepartmentUncheckedCreateWithoutTeachersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutTeachersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutTeachersInput, DepartmentUncheckedUpdateWithoutTeachersInput>
  }

  export type DepartmentUpdateWithoutTeachersInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutTeachersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type TeacherCreateWithoutDepartmentInput = {
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
  }

  export type TeacherUncheckedCreateWithoutDepartmentInput = {
    id?: number
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
  }

  export type TeacherCreateOrConnectWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherCreateManyDepartmentInputEnvelope = {
    data: TeacherCreateManyDepartmentInput | TeacherCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutDepartmentInput = {
    name?: string | null
    total_course?: number | null
  }

  export type CourseUncheckedCreateWithoutDepartmentInput = {
    id?: number
    name?: string | null
    total_course?: number | null
  }

  export type CourseCreateOrConnectWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseCreateManyDepartmentInputEnvelope = {
    data: CourseCreateManyDepartmentInput | CourseCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type FaqCreateWithoutDepartmentInput = {
    question?: string | null
    answer?: string | null
    category?: string | null
    keywords?: QuestionKeywordCreateNestedManyWithoutFaqInput
  }

  export type FaqUncheckedCreateWithoutDepartmentInput = {
    id?: number
    question?: string | null
    answer?: string | null
    category?: string | null
    keywords?: QuestionKeywordUncheckedCreateNestedManyWithoutFaqInput
  }

  export type FaqCreateOrConnectWithoutDepartmentInput = {
    where: FaqWhereUniqueInput
    create: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput>
  }

  export type FaqCreateManyDepartmentInputEnvelope = {
    data: FaqCreateManyDepartmentInput | FaqCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
    create: XOR<TeacherCreateWithoutDepartmentInput, TeacherUncheckedCreateWithoutDepartmentInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutDepartmentInput, TeacherUncheckedUpdateWithoutDepartmentInput>
  }

  export type TeacherUpdateManyWithWhereWithoutDepartmentInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    id?: IntFilter<"Teacher"> | number
    department_id?: IntFilter<"Teacher"> | number
    employee_name?: StringNullableFilter<"Teacher"> | string | null
    teachers_details?: StringNullableFilter<"Teacher"> | string | null
    office_location?: StringNullableFilter<"Teacher"> | string | null
  }

  export type CourseUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
    create: XOR<CourseCreateWithoutDepartmentInput, CourseUncheckedCreateWithoutDepartmentInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutDepartmentInput, CourseUncheckedUpdateWithoutDepartmentInput>
  }

  export type CourseUpdateManyWithWhereWithoutDepartmentInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    department_id?: IntFilter<"Course"> | number
    name?: StringNullableFilter<"Course"> | string | null
    total_course?: IntNullableFilter<"Course"> | number | null
  }

  export type FaqUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: FaqWhereUniqueInput
    update: XOR<FaqUpdateWithoutDepartmentInput, FaqUncheckedUpdateWithoutDepartmentInput>
    create: XOR<FaqCreateWithoutDepartmentInput, FaqUncheckedCreateWithoutDepartmentInput>
  }

  export type FaqUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: FaqWhereUniqueInput
    data: XOR<FaqUpdateWithoutDepartmentInput, FaqUncheckedUpdateWithoutDepartmentInput>
  }

  export type FaqUpdateManyWithWhereWithoutDepartmentInput = {
    where: FaqScalarWhereInput
    data: XOR<FaqUpdateManyMutationInput, FaqUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type FaqScalarWhereInput = {
    AND?: FaqScalarWhereInput | FaqScalarWhereInput[]
    OR?: FaqScalarWhereInput[]
    NOT?: FaqScalarWhereInput | FaqScalarWhereInput[]
    id?: IntFilter<"Faq"> | number
    department_id?: IntFilter<"Faq"> | number
    question?: StringNullableFilter<"Faq"> | string | null
    answer?: StringNullableFilter<"Faq"> | string | null
    category?: StringNullableFilter<"Faq"> | string | null
  }

  export type DepartmentCreateWithoutCoursesInput = {
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    faqs?: FaqCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCoursesInput = {
    id?: number
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    faqs?: FaqUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCoursesInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
  }

  export type DepartmentUpsertWithoutCoursesInput = {
    update: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
    create: XOR<DepartmentCreateWithoutCoursesInput, DepartmentUncheckedCreateWithoutCoursesInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutCoursesInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutCoursesInput, DepartmentUncheckedUpdateWithoutCoursesInput>
  }

  export type DepartmentUpdateWithoutCoursesInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    faqs?: FaqUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateWithoutFaqsInput = {
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherCreateNestedManyWithoutDepartmentInput
    courses?: CourseCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutFaqsInput = {
    id?: number
    name?: string | null
    tuition_fee?: Decimal | DecimalJsLike | number | string | null
    head_name?: string | null
    description?: string | null
    building?: string | null
    floor?: string | null
    career_path?: string | null
    created_at?: Date | string | null
    teachers?: TeacherUncheckedCreateNestedManyWithoutDepartmentInput
    courses?: CourseUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutFaqsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutFaqsInput, DepartmentUncheckedCreateWithoutFaqsInput>
  }

  export type QuestionKeywordCreateWithoutFaqInput = {
    keyword?: string | null
    created_at?: Date | string | null
  }

  export type QuestionKeywordUncheckedCreateWithoutFaqInput = {
    id?: number
    keyword?: string | null
    created_at?: Date | string | null
  }

  export type QuestionKeywordCreateOrConnectWithoutFaqInput = {
    where: QuestionKeywordWhereUniqueInput
    create: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput>
  }

  export type QuestionKeywordCreateManyFaqInputEnvelope = {
    data: QuestionKeywordCreateManyFaqInput | QuestionKeywordCreateManyFaqInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutFaqsInput = {
    update: XOR<DepartmentUpdateWithoutFaqsInput, DepartmentUncheckedUpdateWithoutFaqsInput>
    create: XOR<DepartmentCreateWithoutFaqsInput, DepartmentUncheckedCreateWithoutFaqsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutFaqsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutFaqsInput, DepartmentUncheckedUpdateWithoutFaqsInput>
  }

  export type DepartmentUpdateWithoutFaqsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUpdateManyWithoutDepartmentNestedInput
    courses?: CourseUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutFaqsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    tuition_fee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    head_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    building?: NullableStringFieldUpdateOperationsInput | string | null
    floor?: NullableStringFieldUpdateOperationsInput | string | null
    career_path?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teachers?: TeacherUncheckedUpdateManyWithoutDepartmentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type QuestionKeywordUpsertWithWhereUniqueWithoutFaqInput = {
    where: QuestionKeywordWhereUniqueInput
    update: XOR<QuestionKeywordUpdateWithoutFaqInput, QuestionKeywordUncheckedUpdateWithoutFaqInput>
    create: XOR<QuestionKeywordCreateWithoutFaqInput, QuestionKeywordUncheckedCreateWithoutFaqInput>
  }

  export type QuestionKeywordUpdateWithWhereUniqueWithoutFaqInput = {
    where: QuestionKeywordWhereUniqueInput
    data: XOR<QuestionKeywordUpdateWithoutFaqInput, QuestionKeywordUncheckedUpdateWithoutFaqInput>
  }

  export type QuestionKeywordUpdateManyWithWhereWithoutFaqInput = {
    where: QuestionKeywordScalarWhereInput
    data: XOR<QuestionKeywordUpdateManyMutationInput, QuestionKeywordUncheckedUpdateManyWithoutFaqInput>
  }

  export type QuestionKeywordScalarWhereInput = {
    AND?: QuestionKeywordScalarWhereInput | QuestionKeywordScalarWhereInput[]
    OR?: QuestionKeywordScalarWhereInput[]
    NOT?: QuestionKeywordScalarWhereInput | QuestionKeywordScalarWhereInput[]
    id?: IntFilter<"QuestionKeyword"> | number
    faq_id?: IntFilter<"QuestionKeyword"> | number
    keyword?: StringNullableFilter<"QuestionKeyword"> | string | null
    created_at?: DateTimeNullableFilter<"QuestionKeyword"> | Date | string | null
  }

  export type FaqCreateWithoutKeywordsInput = {
    question?: string | null
    answer?: string | null
    category?: string | null
    department: DepartmentCreateNestedOneWithoutFaqsInput
  }

  export type FaqUncheckedCreateWithoutKeywordsInput = {
    id?: number
    department_id: number
    question?: string | null
    answer?: string | null
    category?: string | null
  }

  export type FaqCreateOrConnectWithoutKeywordsInput = {
    where: FaqWhereUniqueInput
    create: XOR<FaqCreateWithoutKeywordsInput, FaqUncheckedCreateWithoutKeywordsInput>
  }

  export type FaqUpsertWithoutKeywordsInput = {
    update: XOR<FaqUpdateWithoutKeywordsInput, FaqUncheckedUpdateWithoutKeywordsInput>
    create: XOR<FaqCreateWithoutKeywordsInput, FaqUncheckedCreateWithoutKeywordsInput>
    where?: FaqWhereInput
  }

  export type FaqUpdateToOneWithWhereWithoutKeywordsInput = {
    where?: FaqWhereInput
    data: XOR<FaqUpdateWithoutKeywordsInput, FaqUncheckedUpdateWithoutKeywordsInput>
  }

  export type FaqUpdateWithoutKeywordsInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    department?: DepartmentUpdateOneRequiredWithoutFaqsNestedInput
  }

  export type FaqUncheckedUpdateWithoutKeywordsInput = {
    id?: IntFieldUpdateOperationsInput | number
    department_id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateWithoutSchool_detailInput = {
    info?: string | null
    website?: string | null
    number?: string | null
  }

  export type ContactUncheckedCreateWithoutSchool_detailInput = {
    id?: number
    info?: string | null
    website?: string | null
    number?: string | null
  }

  export type ContactCreateOrConnectWithoutSchool_detailInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput>
  }

  export type ContactCreateManySchool_detailInputEnvelope = {
    data: ContactCreateManySchool_detailInput | ContactCreateManySchool_detailInput[]
    skipDuplicates?: boolean
  }

  export type SchoolFaqCreateWithoutSchool_detailInput = {
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SchoolFaqUncheckedCreateWithoutSchool_detailInput = {
    id?: number
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type SchoolFaqCreateOrConnectWithoutSchool_detailInput = {
    where: SchoolFaqWhereUniqueInput
    create: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput>
  }

  export type SchoolFaqCreateManySchool_detailInputEnvelope = {
    data: SchoolFaqCreateManySchool_detailInput | SchoolFaqCreateManySchool_detailInput[]
    skipDuplicates?: boolean
  }

  export type ContactUpsertWithWhereUniqueWithoutSchool_detailInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutSchool_detailInput, ContactUncheckedUpdateWithoutSchool_detailInput>
    create: XOR<ContactCreateWithoutSchool_detailInput, ContactUncheckedCreateWithoutSchool_detailInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutSchool_detailInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutSchool_detailInput, ContactUncheckedUpdateWithoutSchool_detailInput>
  }

  export type ContactUpdateManyWithWhereWithoutSchool_detailInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutSchool_detailInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: IntFilter<"Contact"> | number
    school_detail_id?: IntFilter<"Contact"> | number
    info?: StringNullableFilter<"Contact"> | string | null
    website?: StringNullableFilter<"Contact"> | string | null
    number?: StringNullableFilter<"Contact"> | string | null
  }

  export type SchoolFaqUpsertWithWhereUniqueWithoutSchool_detailInput = {
    where: SchoolFaqWhereUniqueInput
    update: XOR<SchoolFaqUpdateWithoutSchool_detailInput, SchoolFaqUncheckedUpdateWithoutSchool_detailInput>
    create: XOR<SchoolFaqCreateWithoutSchool_detailInput, SchoolFaqUncheckedCreateWithoutSchool_detailInput>
  }

  export type SchoolFaqUpdateWithWhereUniqueWithoutSchool_detailInput = {
    where: SchoolFaqWhereUniqueInput
    data: XOR<SchoolFaqUpdateWithoutSchool_detailInput, SchoolFaqUncheckedUpdateWithoutSchool_detailInput>
  }

  export type SchoolFaqUpdateManyWithWhereWithoutSchool_detailInput = {
    where: SchoolFaqScalarWhereInput
    data: XOR<SchoolFaqUpdateManyMutationInput, SchoolFaqUncheckedUpdateManyWithoutSchool_detailInput>
  }

  export type SchoolFaqScalarWhereInput = {
    AND?: SchoolFaqScalarWhereInput | SchoolFaqScalarWhereInput[]
    OR?: SchoolFaqScalarWhereInput[]
    NOT?: SchoolFaqScalarWhereInput | SchoolFaqScalarWhereInput[]
    id?: IntFilter<"SchoolFaq"> | number
    school_detail_id?: IntFilter<"SchoolFaq"> | number
    question?: StringNullableFilter<"SchoolFaq"> | string | null
    answer?: StringNullableFilter<"SchoolFaq"> | string | null
    category?: StringNullableFilter<"SchoolFaq"> | string | null
    priority?: IntNullableFilter<"SchoolFaq"> | number | null
    view_count?: IntNullableFilter<"SchoolFaq"> | number | null
    is_active?: BoolNullableFilter<"SchoolFaq"> | boolean | null
    created_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"SchoolFaq"> | Date | string | null
  }

  export type SchoolDetailCreateWithoutContactsInput = {
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    school_faqs?: SchoolFaqCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailUncheckedCreateWithoutContactsInput = {
    id?: number
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    school_faqs?: SchoolFaqUncheckedCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailCreateOrConnectWithoutContactsInput = {
    where: SchoolDetailWhereUniqueInput
    create: XOR<SchoolDetailCreateWithoutContactsInput, SchoolDetailUncheckedCreateWithoutContactsInput>
  }

  export type SchoolDetailUpsertWithoutContactsInput = {
    update: XOR<SchoolDetailUpdateWithoutContactsInput, SchoolDetailUncheckedUpdateWithoutContactsInput>
    create: XOR<SchoolDetailCreateWithoutContactsInput, SchoolDetailUncheckedCreateWithoutContactsInput>
    where?: SchoolDetailWhereInput
  }

  export type SchoolDetailUpdateToOneWithWhereWithoutContactsInput = {
    where?: SchoolDetailWhereInput
    data: XOR<SchoolDetailUpdateWithoutContactsInput, SchoolDetailUncheckedUpdateWithoutContactsInput>
  }

  export type SchoolDetailUpdateWithoutContactsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    school_faqs?: SchoolFaqUpdateManyWithoutSchool_detailNestedInput
  }

  export type SchoolDetailUncheckedUpdateWithoutContactsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    school_faqs?: SchoolFaqUncheckedUpdateManyWithoutSchool_detailNestedInput
  }

  export type SchoolDetailCreateWithoutSchool_faqsInput = {
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    contacts?: ContactCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailUncheckedCreateWithoutSchool_faqsInput = {
    id?: number
    name?: string | null
    small_details?: string | null
    year_built?: number | null
    history?: string | null
    vision?: string | null
    mission?: string | null
    address?: string | null
    accreditation?: string | null
    contacts?: ContactUncheckedCreateNestedManyWithoutSchool_detailInput
  }

  export type SchoolDetailCreateOrConnectWithoutSchool_faqsInput = {
    where: SchoolDetailWhereUniqueInput
    create: XOR<SchoolDetailCreateWithoutSchool_faqsInput, SchoolDetailUncheckedCreateWithoutSchool_faqsInput>
  }

  export type SchoolDetailUpsertWithoutSchool_faqsInput = {
    update: XOR<SchoolDetailUpdateWithoutSchool_faqsInput, SchoolDetailUncheckedUpdateWithoutSchool_faqsInput>
    create: XOR<SchoolDetailCreateWithoutSchool_faqsInput, SchoolDetailUncheckedCreateWithoutSchool_faqsInput>
    where?: SchoolDetailWhereInput
  }

  export type SchoolDetailUpdateToOneWithWhereWithoutSchool_faqsInput = {
    where?: SchoolDetailWhereInput
    data: XOR<SchoolDetailUpdateWithoutSchool_faqsInput, SchoolDetailUncheckedUpdateWithoutSchool_faqsInput>
  }

  export type SchoolDetailUpdateWithoutSchool_faqsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUpdateManyWithoutSchool_detailNestedInput
  }

  export type SchoolDetailUncheckedUpdateWithoutSchool_faqsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    small_details?: NullableStringFieldUpdateOperationsInput | string | null
    year_built?: NullableIntFieldUpdateOperationsInput | number | null
    history?: NullableStringFieldUpdateOperationsInput | string | null
    vision?: NullableStringFieldUpdateOperationsInput | string | null
    mission?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accreditation?: NullableStringFieldUpdateOperationsInput | string | null
    contacts?: ContactUncheckedUpdateManyWithoutSchool_detailNestedInput
  }

  export type ChatbotSessionCreateManyUserInput = {
    id?: number
    chatbot_response?: string | null
    response_time?: Date | string | null
    total_queries?: number | null
  }

  export type QueryCreateManyUserInput = {
    id?: number
    chatbot_session_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
  }

  export type FeedbackCreateManyUserInput = {
    id?: number
    query_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type ChatbotSessionUpdateWithoutUserInput = {
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
    queries?: QueryUpdateManyWithoutSessionNestedInput
  }

  export type ChatbotSessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
    queries?: QueryUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type ChatbotSessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatbot_response?: NullableStringFieldUpdateOperationsInput | string | null
    response_time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total_queries?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QueryUpdateWithoutUserInput = {
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    session?: ChatbotSessionUpdateOneRequiredWithoutQueriesNestedInput
    feedback?: FeedbackUpdateManyWithoutQueryNestedInput
  }

  export type QueryUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatbot_session_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    feedback?: FeedbackUncheckedUpdateManyWithoutQueryNestedInput
  }

  export type QueryUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    chatbot_session_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FeedbackUpdateWithoutUserInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    query?: QueryUpdateOneRequiredWithoutFeedbackNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    query_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    query_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyQueryInput = {
    id?: number
    user_id: number
    rating?: number | null
    comment?: string | null
    resolved_issue?: boolean | null
    created_at?: Date | string
  }

  export type FeedbackUpdateWithoutQueryInput = {
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutQueryInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutQueryInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    resolved_issue?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QueryCreateManySessionInput = {
    id?: number
    user_id: number
    query_text?: string | null
    users_data_inputed?: QueryCreateusers_data_inputedInput | string[]
    chatbot_response?: QueryCreatechatbot_responseInput | string[]
    created_at?: Date | string | null
  }

  export type QueryUpdateWithoutSessionInput = {
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutQueriesNestedInput
    feedback?: FeedbackUpdateManyWithoutQueryNestedInput
  }

  export type QueryUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    feedback?: FeedbackUncheckedUpdateManyWithoutQueryNestedInput
  }

  export type QueryUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    query_text?: NullableStringFieldUpdateOperationsInput | string | null
    users_data_inputed?: QueryUpdateusers_data_inputedInput | string[]
    chatbot_response?: QueryUpdatechatbot_responseInput | string[]
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TeacherCreateManyDepartmentInput = {
    id?: number
    employee_name?: string | null
    teachers_details?: string | null
    office_location?: string | null
  }

  export type CourseCreateManyDepartmentInput = {
    id?: number
    name?: string | null
    total_course?: number | null
  }

  export type FaqCreateManyDepartmentInput = {
    id?: number
    question?: string | null
    answer?: string | null
    category?: string | null
  }

  export type TeacherUpdateWithoutDepartmentInput = {
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    employee_name?: NullableStringFieldUpdateOperationsInput | string | null
    teachers_details?: NullableStringFieldUpdateOperationsInput | string | null
    office_location?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUpdateWithoutDepartmentInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    total_course?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FaqUpdateWithoutDepartmentInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: QuestionKeywordUpdateManyWithoutFaqNestedInput
  }

  export type FaqUncheckedUpdateWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    keywords?: QuestionKeywordUncheckedUpdateManyWithoutFaqNestedInput
  }

  export type FaqUncheckedUpdateManyWithoutDepartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionKeywordCreateManyFaqInput = {
    id?: number
    keyword?: string | null
    created_at?: Date | string | null
  }

  export type QuestionKeywordUpdateWithoutFaqInput = {
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionKeywordUncheckedUpdateWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type QuestionKeywordUncheckedUpdateManyWithoutFaqInput = {
    id?: IntFieldUpdateOperationsInput | number
    keyword?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ContactCreateManySchool_detailInput = {
    id?: number
    info?: string | null
    website?: string | null
    number?: string | null
  }

  export type SchoolFaqCreateManySchool_detailInput = {
    id?: number
    question?: string | null
    answer?: string | null
    category?: string | null
    priority?: number | null
    view_count?: number | null
    is_active?: boolean | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type ContactUpdateWithoutSchool_detailInput = {
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateWithoutSchool_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUncheckedUpdateManyWithoutSchool_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    info?: NullableStringFieldUpdateOperationsInput | string | null
    website?: NullableStringFieldUpdateOperationsInput | string | null
    number?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SchoolFaqUpdateWithoutSchool_detailInput = {
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolFaqUncheckedUpdateWithoutSchool_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type SchoolFaqUncheckedUpdateManyWithoutSchool_detailInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: NullableStringFieldUpdateOperationsInput | string | null
    answer?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    priority?: NullableIntFieldUpdateOperationsInput | number | null
    view_count?: NullableIntFieldUpdateOperationsInput | number | null
    is_active?: NullableBoolFieldUpdateOperationsInput | boolean | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}