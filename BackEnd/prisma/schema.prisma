datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  device_id     String?   @unique
  created_at    DateTime  @default(now())
  last_active   DateTime? 

  sessions      ChatbotSession[]
  queries       Query[]
  feedbacks     Feedback[]
}


model Query {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  chatbot_session_id  Int
  query_text          String?
  users_data_inputed  String[]
  chatbot_response    String[]
  created_at          DateTime?

  user     User            @relation(fields: [user_id], references: [id])
  session  ChatbotSession  @relation(fields: [chatbot_session_id], references: [id])
  feedback Feedback[]
}

model ChatbotSession {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique
  chatbot_response String?
  response_time    DateTime?
  total_queries    Int?     @default(0)

  user    User    @relation(fields: [user_id], references: [id])
  queries Query[]
}

model Feedback {
  id             Int       @id @default(autoincrement())
  query_id       Int
  user_id        Int
  rating         Int?
  comment        String?
  resolved_issue Boolean?
  created_at     DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
  query Query @relation(fields: [query_id], references: [id])
}

model Greeting {
  id      Int    @id @default(autoincrement())
  message String?
}

//okay na ning sa mabaw

model SchoolDetail {
  id              Int    @id @default(autoincrement())
  name            String?
  small_details   String? @db.Text
  history         String? @db.Text
  vision          String? @db.Text
  mission         String? @db.Text
  address         String? @db.Text
  goals           String? @db.Text

  school_faqs SchoolFaq[]
}

model SchoolFaq {
  id               Int       @id @default(autoincrement())
  school_detail_id Int
  question         String?
  answer           String?
  category         String?
  priority         Int?
  view_count       Int?
  is_active        Boolean?
  created_at       DateTime?
  updated_at       DateTime?

  school_detail SchoolDetail @relation(fields: [school_detail_id], references: [id])
}


// na finalize na ning ubos
model Faq {
  id            Int    @id @default(autoincrement())
  department_id Int?
  question      String
  answer        String?
  category      String

  department Department[]
  keywords   QuestionKeyword[] 
  offices    Office[]
  studentOrgs  StudentOrg[]
  contact       Contact[]
  scholarships  Scholarship[]
} //not used

model QuestionKeyword {
  id         Int       @id @default(autoincrement())
  faq_id     Int
  keyword    String?
  created_at DateTime?  @default(now())

  faq Faq @relation(fields: [faq_id], references: [id], onDelete: Cascade)
} //not used

model Scholarship { //completed data
  id                    Int  @id @default(autoincrement())
  name                  String
  category              String
  description           String
  offeredBy             String
  eligibility_criteria  String
  application_process   String
  required_document     String
  award_amount          String
  contact_office        String

  faq                   Faq[]
}

model Office { //incomplete data
  id                Int       @id @default(autoincrement())
  name              String    @unique //Example: BURSAR
  description       String?   // The Bursarâ€™s Office handles school payments, such as tuition and other fees, and assists students and parents with billing and receipts
  location_building String?   //SJC Main Building
  location_floor    String?   //Ground Floor
  operating_hours   String?   //Mon-Friday, 8:30AM - 5:00PM and Sat, 8:30AM - 12:00PM
  contact_email     String?   
  contact_phone     String?   //0961 426 3942
  fb_page           String?   //https://www.facebook.com/SJCteller

  image             OfficeImage?
  faqs              Faq[]
}

model OfficeImage {
  id        Int     @id @default(autoincrement())
  office_id Int     @unique
  image_url String  @db.Text

  office    Office  @relation(fields: [office_id], references: [id])
}

model StudentOrg { //fb_page links nalang kuwang
  id            Int @id @default(autoincrement())
  name          String
  description   String
  fb_page       String?

  faqs          Faq[]
}

model Contact {
  id               Int    @id @default(autoincrement())
  name             String //Example: Saint Josep College or College of Computer Studies
  fb_page          String? //link
  email            String? 

  faq              Faq[]
}

model Course {
  id            Int     @id @default(autoincrement())
  program_id    Int?    //optional, null for minor subjects
  course_code   String  @unique
  course_name   String
  units         Int

  program       Program? @relation(fields: [program_id], references: [id])
}

model Department {
  id             Int      @id @default(autoincrement())
  name           String?
  acronym        String?
  head_name      String?
  description    String?
  building       String?
  floor          String?
  career_path    String?

  faqs     Faq[]

  program   Program[]
}

model Program {
  id                Int     @id @default(autoincrement())
  department_id     Int
  program_type      ProgramType 
  program           String
  acronym           String?
  tuition_fee       Decimal //approximation only per semester

  department    Department      @relation(fields: [department_id], references: [id])
  courses  Course[]
}

enum ProgramType {
  undergraduate
  graduate
  seniorhighschool
  other
}

model SchoolOfficial {
  id         Int      @id @default(autoincrement())
  name       String
  title      String?
  department String?
  category   String
  created_at DateTime  @default(now())
}