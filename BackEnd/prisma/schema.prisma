generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  created_at  DateTime        @default(now())
  last_active DateTime?
  device_id   String?         @unique
  sessions    ChatbotSession?
  feedbacks   Feedback[]
  queries     Query[]
}

model Query {
  id                 Int            @id @default(autoincrement())
  user_id            Int
  chatbot_session_id Int
  query_text         String?
  users_data_inputed String[]
  chatbot_response   String[]
  created_at         DateTime?
  feedback           Feedback[]
  session            ChatbotSession @relation(fields: [chatbot_session_id], references: [id])
  user               User           @relation(fields: [user_id], references: [id])
}

model ChatbotSession {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique
  response_time    DateTime?
  total_queries    Int?      @default(0)
  chatbot_response String[]
  user             User      @relation(fields: [user_id], references: [id])
  queries          Query[]
}

model Feedback {
  id             Int      @id @default(autoincrement())
  query_id       Int
  user_id        Int
  rating         Int?
  comment        String?
  resolved_issue Boolean?
  created_at     DateTime @default(now())
  query          Query    @relation(fields: [query_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id])
}

model SchoolDetail {
  id            Int     @id @default(autoincrement())
  small_details String?
  history       String?
  vision        String?
  mission       String?
  address       String?
  goals         String?
  school_name   String?
  location_url  String?
}

model Scholarship {
  id                   Int    @id @default(autoincrement())
  description          String
  offeredBy            String
  eligibility_criteria String
  application_process  String
  required_document    String
  award_amount         String
  contact_office       String
  category             String
  scholarship_name     String
}

model Office {
  id                     Int                  @id @default(autoincrement())
  description            String?
  location_building      String?
  location_floor         String?
  operating_hours        String?
  contact_email          String?
  contact_phone          String?
  fb_page                String?
  office_name            String               @unique
  officeAndFacilities_id Int?
  officeAndFacilities    OfficeAndFacilities? @relation(fields: [officeAndFacilities_id], references: [id])
}

model OfficeAndFacilities {
  id               Int      @id @default(autoincrement())
  office_name      String?
  building         String
  room_number      String?
  map_overview_url String?
  map_name         String?
  facility_name    String?
  facility_url     String?
  office_url       String?
  room_url         String?
  office           Office[]
}

model StudentOrg {
  id                Int     @id @default(autoincrement())
  description       String
  fb_page           String?
  organization_name String
}

model Contact {
  id           Int     @id @default(autoincrement())
  email        String?
  fb_page      String?
  contact_name String
}

model Course {
  id          Int      @id @default(autoincrement())
  program_id  Int?
  course_code String?   
  course_name String
  year_level  String?
  semester    String?
  units       Int?

  program     Program? @relation(fields: [program_id], references: [id])
}

model Department {
  id              Int       @id @default(autoincrement())
  head_name       String?
  description     String?
  building        String?
  floor           String?
  career_path     String?
  acronym         String?
  department_name String?
  program         Program[]
}

model Program {
  id            Int         @id @default(autoincrement())
  department_id Int?
  tuition_fee   String?
  acronym       String?
  program_name  String
  program_type  String
  courses       Course[]
  department    Department? @relation(fields: [department_id], references: [id])
}

model SchoolOfficial {
  id            Int      @id @default(autoincrement())
  title         String?
  department    String?
  category      String
  created_at    DateTime @default(now())
  official_name String
}

model EnrollmentAndNavigation {
  id                 Int    @id @default(autoincrement())
  enrollment_process String
  navigation         String
}
