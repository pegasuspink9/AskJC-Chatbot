generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int             @id @default(autoincrement())
  created_at  DateTime        @default(now())
  last_active DateTime?
  device_id   String?         @unique
  sessions    ChatbotSession?
  feedbacks   Feedback[]
  queries     Query[]
}

model Query {
  id                 Int            @id @default(autoincrement())
  user_id            Int
  chatbot_session_id Int
  query_text         String?
  users_data_inputed String[]
  chatbot_response   String[]
  created_at         DateTime?
  feedback           Feedback[]
  session            ChatbotSession @relation(fields: [chatbot_session_id], references: [id])
  user               User           @relation(fields: [user_id], references: [id])
}

model ChatbotSession {
  id               Int       @id @default(autoincrement())
  user_id          Int       @unique
  response_time    DateTime?
  total_queries    Int?      @default(0)
  chatbot_response String[]
  user             User      @relation(fields: [user_id], references: [id])
  queries          Query[]
}

model Feedback {
  id             Int      @id @default(autoincrement())
  query_id       Int
  user_id        Int
  rating         Int?
  comment        String?
  resolved_issue Boolean?
  created_at     DateTime @default(now())
  query          Query    @relation(fields: [query_id], references: [id])
  user           User     @relation(fields: [user_id], references: [id])
}

model Greeting {
  id      Int     @id @default(autoincrement())
  message String?
}

model SchoolDetail {
  id            Int         @id @default(autoincrement())
  small_details String?
  history       String?
  vision        String?
  mission       String?
  address       String?
  goals         String?
  school_name   String?
  location_url  String?
  school_faqs   SchoolFaq[]
}

model SchoolFaq {
  id               Int          @id @default(autoincrement())
  school_detail_id Int
  question         String?
  answer           String?
  category         String?
  priority         Int?
  view_count       Int?
  is_active        Boolean?
  created_at       DateTime?
  updated_at       DateTime?
  school_detail    SchoolDetail @relation(fields: [school_detail_id], references: [id])
}

model Faq {
  id            Int               @id @default(autoincrement())
  department_id Int?
  question      String
  answer        String?
  category      String
  keywords      QuestionKeyword[]
  contact       Contact[]         @relation("ContactToFaq")
  department    Department[]      @relation("DepartmentToFaq")
  offices       Office[]          @relation("FaqToOffice")
  scholarships  Scholarship[]     @relation("FaqToScholarship")
  studentOrgs   StudentOrg[]      @relation("FaqToStudentOrg")
}

model QuestionKeyword {
  id         Int       @id @default(autoincrement())
  faq_id     Int
  keyword    String?
  created_at DateTime? @default(now())
  faq        Faq       @relation(fields: [faq_id], references: [id], onDelete: Cascade)
}

model Scholarship {
  id                   Int    @id @default(autoincrement())
  description          String
  offeredBy            String
  eligibility_criteria String
  application_process  String
  required_document    String
  award_amount         String
  contact_office       String
  category             String
  scholarship_name     String
  faq                  Faq[]  @relation("FaqToScholarship")
}

model Office {
  id                Int     @id @default(autoincrement())
  description       String?
  location_building String?
  location_floor    String?
  operating_hours   String?
  contact_email     String?
  contact_phone     String?
  fb_page           String?
  office_name       String  @unique
  faqs              Faq[]   @relation("FaqToOffice")
}

model StudentOrg {
  id                Int     @id @default(autoincrement())
  description       String
  fb_page           String?
  organization_name String
  faqs              Faq[]   @relation("FaqToStudentOrg")
}

model Contact {
  id           Int     @id @default(autoincrement())
  email        String?
  fb_page      String?
  contact_name String
  faq          Faq[]   @relation("ContactToFaq")
}

model Course {
  id          Int      @id @default(autoincrement())
  course_code String   @unique
  course_name String
  program_id  Int?
  units       Int
  program     Program? @relation(fields: [program_id], references: [id])
}

model Department {
  id              Int       @id @default(autoincrement())
  head_name       String?
  description     String?
  building        String?
  floor           String?
  career_path     String?
  acronym         String?
  department_name String?
  program         Program[]
  faqs            Faq[]     @relation("DepartmentToFaq")
}

model Program {
  id            Int         @id @default(autoincrement())
  department_id Int?
  tuition_fee   String?
  acronym       String?
  program_name  String
  program_type  String
  courses       Course[]
  department    Department? @relation(fields: [department_id], references: [id])
}

model SchoolOfficial {
  id            Int      @id @default(autoincrement())
  title         String?
  department    String?
  category      String
  created_at    DateTime @default(now())
  official_name String
}

model OfficeAndFacilities {
  id               Int     @id @default(autoincrement())
  office_name      String?
  building         String
  room_number      String?
  map_overview_url String?
  map_name         String?
  facility_name    String?
  facility_url     String?
  office_url       String?
  room_url         String?
}
